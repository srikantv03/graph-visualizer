{"version":3,"sources":["components/instructions.jsx","components/header.jsx","components/dfsAlgs/dfs.jsx","components/bfsAlgs/bfs.jsx","components/dfsAlgs/wordSearch.jsx","components/bfsAlgs/bfsShortest.jsx","MainWindow.js","App.js","reportWebVitals.js","index.js"],"names":["Instructions","Fragment","modalStyle","position","top","left","transform","width","height","overflow","bgcolor","borderRadius","boxShadow","p","Header","useRef","useState","open","setOpen","className","ButtonGroup","variant","Button","onClick","sx","margin","color","target","href","Modal","onClose","Box","strings","require","DepthFirst","props","cols","setCols","rows","setRows","obstacles","setObstacles","path","setPath","running","setRunning","animationSpeed","setAnimationSpeed","sleep","milliseconds","Promise","resolve","setTimeout","clearGrid","getPathColors","cellId","Math","min","backgroundColor","getClassName","size","includes","dfsSearch","a","m","n","visited","i","push","j","dfsHelper","x","y","v","obst","document","querySelector","returnValue","move","nx","ny","length","indexOf","addLog","severity","details","editState","e","temp","parseInt","getAttribute","splice","data","rowOptions","Array","from","_","index","colOptions","optionStyle","Grid","container","spacing","item","md","xs","padding","DFS_DESCRIPTION","FormControl","fullWidth","TextField","select","id","value","label","onChange","map","MenuItem","Slider","defaultValue","getAriaValueText","step","marks","max","valueLabelDisplay","Alert","textAlign","style","endIcon","fontSize","disabled","RUN_BUTTON","minHeight","row","to","smooth","duration","IconButton","BreadthFirst","bfsSearch","bfsHelper","dq","vals","shift","console","log","nextMoves","BFS_DESCRIPTION","verticalAlign","WordSearchDFS","searchString","setSearchString","gridData","setGridData","rval","searchLetter","randomLetter","alphabet","floor","random","DFS_WS_DESCRIPTION","newGrid","GRID_RANDOM_BUTTON","rowIndex","BreadthFirstShortest","start","setStart","end","setEnd","placingState","setPlacingState","rog","setRog","editFunction","iter","randomNumber","ToggleButtonGroup","exclusive","ToggleButton","MainWindow","stateLogs","setStateLogs","sectStyle","makeStyles","theme","root","flexGrow","menuButton","marginRight","title","display","breakpoints","up","justifyContent","alignItems","newLog","logs","App","hasWindow","window","innerWidth","innerHeight","dimensions","createTheme","typography","fontFamily","ThemeProvider","dims","rootElement","getElementById","ReactDOM","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"oUAMe,SAASA,IACtB,OAAO,cAAC,IAAMC,SAAP,ICFT,IAAMC,EAAa,CACjBC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXC,MAAO,OACPC,OAAQ,OACRC,SAAU,OACVC,QAAS,mBACTC,aAAc,EACdC,UAAW,GACXC,EAAG,GA6IUC,MA1If,WAGoBC,iBAAO,MAFzB,IAIA,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAIA,EAA0BF,mBAAS,CACjC,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,MALR,mBA2EA,OA3EA,UAoFE,aARA,CAQC,IAAMf,SAAP,UACE,qBAAKkB,UAAU,mBAAf,SACE,sBAAKA,UAAU,aAAf,UACE,oBAAIA,UAAU,cAAd,wCACA,oBAAIA,UAAU,wBAAd,+BACA,eAACC,EAAA,EAAD,CAAaC,QAAQ,OAAO,aAAW,oBAAvC,UACE,cAACC,EAAA,EAAD,CACEC,QA9FO,kBAAML,GAAQ,IA+FrBM,GAAI,CAAEC,OAAQ,OACdC,MAAM,UACNL,QAAQ,YAJV,wBAQA,cAACC,EAAA,EAAD,CACEE,GAAI,CAAEC,OAAQ,QACdC,MAAM,YACNL,QAAQ,YACRM,OAAO,SACPC,KAAK,qDALP,4BAUF,8BACE,cAACC,EAAA,EAAD,CACEZ,KAAMA,EACNa,QAjHQ,kBAAMZ,GAAQ,IAkHtB,kBAAgB,oBAChB,mBAAiB,0BAJnB,SAME,cAACa,EAAA,EAAD,CAAKP,GAAItB,EAAT,SAIE,cAACF,EAAD,kB,yHCnIVgC,EAAUC,EAAQ,IAET,SAASC,EAAWC,GAyJjC,IAxJA,MAAwBnB,mBAAS,GAAjC,mBAAOoB,EAAP,KAAaC,EAAb,KACA,EAAwBrB,mBAAS,GAAjC,mBAAOsB,EAAP,KAAaC,EAAb,KACA,EAAkCvB,mBAAS,IAA3C,mBAAOwB,EAAP,KAAkBC,EAAlB,KACA,EAA0BzB,mBAAS,GAAnC,mBACA,GADA,UACsBA,mBAAS,KAA/B,mBACA,GADA,UACwBA,mBAAS,KAAjC,mBAAO0B,EAAP,KAAaC,EAAb,KACA,EAA8B3B,oBAAS,GAAvC,mBAAO4B,EAAP,KAAgBC,EAAhB,KACA,EAA4C7B,mBAAS,GAArD,mBAAO8B,EAAP,KAAuBC,EAAvB,KAYMC,EAAQ,SAACC,GACb,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAGhDI,EAAY,WAChBZ,EAAa,KAGTa,EAAgB,SAACC,GACrB,GAAIA,KAAUb,GAAwB,MAAhBA,EAAKa,GAAiB,CAC1C,IAAI7B,EAAQ,QAIZ,OAHK,GAAK8B,KAAKC,IAAInB,EAAMF,IAASM,EAAKa,GAAU,MAC/C7B,EAAQ,SAEH,CACLgC,gBAAgB,UAAD,QACZ,GAAKF,KAAKC,IAAInB,EAAMF,IAASM,EAAKa,GADtB,aAEV,KAAO,GAAKC,KAAKC,IAAInB,EAAMF,IAASM,EAAKa,GAF/B,KAGf7B,MAAOA,GAGX,MAAO,CAAEA,MAAO,UAGZiC,EAAe,SAACJ,GACpB,IACIK,EAAO,QASX,OAVatB,GAED,EACVsB,EAAO,WAHItB,GAIM,GACjBsB,EAAO,YALItB,GAMM,KACjBsB,EAAO,YAGH,YAAN,OAAmBpB,EAAUqB,SAASN,GAAU,WAAa,GAA7D,YAAmEK,IAG/DE,EAAS,uCAAG,oCAAAC,EAAA,sDAIhB,IAHIC,EAAI5B,EAAO,EACX6B,EAAI3B,EAAO,EACX4B,EAAU,GACLC,EAAI,EAAGA,EAAI/B,EAAM+B,IAExB,IADAD,EAAQE,KAAK,IACJC,EAAI,EAAGA,EAAI/B,EAAM+B,IACxBH,EAAQC,GAAGC,MAAK,GAPJ,OAUhBvB,GAAW,GAVK,SAWCyB,GAAUJ,EAAS,EAAG,EAAGF,EAAGC,EAAG,GAXhC,cAYhBpB,GAAW,GACXJ,EAAa,IAbG,4CAAH,qDAgBT6B,GAAS,uCAAG,WAAOJ,EAASK,EAAGC,EAAGR,EAAGC,EAAGQ,GAA5B,6BAAAV,EAAA,yDACVW,EADU,YACClC,GACbe,EAASgB,GAAKN,EAAI,GAAKO,EACvBD,GAAKP,GAAKQ,GAAKP,EAHH,uBAKdvB,EADa6B,GAAKN,EAAI,GAAKO,GACZC,EACf9B,EAAQ,eAAKD,IANC,mBAQP,GARO,UAUdwB,EAAQK,GAAGC,IAAK,EAC0C,MAAtDG,SAASC,cAAT,uBAAuCrB,EAAvC,OAXU,2CAYL,GAZK,QAedb,EAAKa,GAAUkB,EACf9B,EAAQ,eAAKD,IAEbU,YAAW,cAAU,KAOjByB,GAAc,EAzBJ,MAmBE,CACd,CAACN,EAAI,EAAGC,GACR,CAACD,EAAI,EAAGC,GACR,CAACD,EAAGC,EAAI,GACR,CAACD,EAAGC,EAAI,IAvBI,6CA2BLM,EA3BK,KA4BRC,EAAKD,EAAK,GACVE,EAAKF,EAAK,KACVC,GAAMb,EAAQe,QAAUD,GAAMd,EAAQ,GAAGe,QA9BjC,6DAkCVF,GAAM,GACNC,GAAM,GACND,GAAMd,GACNc,GAAMf,IACLE,EAAQa,GAAIC,KACuB,GAApCN,EAAKQ,QAAQH,GAAMd,EAAI,GAAKe,GAvClB,kCAyCJhC,EAAO,EAAIF,EAAkB,KAzCzB,eA0CVX,EAAMgD,OAAO,CACXC,SAAUP,EAAc,UAAY,UACpCQ,QAAQ,IAAD,OAAMN,EAAN,aAAaC,EAAb,OA5CC,UA8CUV,GAAUJ,EAASa,EAAIC,EAAIhB,EAAGC,EAAGQ,EAAI,GA9C/C,aA8CVI,EA9CU,4FAqDdX,EAAQK,GAAGC,IAAK,EACXK,EAtDS,kCAuDN7B,EAAO,EAAIF,EAAkB,KAvDvB,QAwDZJ,EAAKa,GAAU,KACfZ,EAAQ,eAAKD,IAzDD,iCA4DPmC,GA5DO,4CAAH,gEAgETS,GAAY,SAACC,GAEjB,IADA,IAAIC,EAAI,YAAOhD,GACN2B,EAAI,EAAGA,EAAIqB,EAAKP,OAAQd,IAAK,CAEpC,GADUqB,EAAKrB,IACJsB,SAASF,EAAE5D,OAAO+D,aAAa,YAGxC,OAFAF,EAAKG,OAAOxB,EAAG,QACf1B,EAAa+C,GAIjBA,EAAKpB,KAAKqB,SAASF,EAAE5D,OAAO+D,aAAa,aACzCjD,EAAa+C,IAGXI,GAAO,GACFzB,GAAI,EAAGA,GAAI/B,EAAM+B,KAAK,CAC7ByB,GAAKxB,KAAK,IACV,IAAK,IAAIC,GAAI,EAAGA,GAAI/B,EAAM+B,KACxBuB,GAAKzB,IAAGC,KAAK9B,EAAO6B,GAAIE,IAI5B,IAAMwB,GAAaC,MAAMC,KAAK,CAAEd,OAAQ,KAAM,SAACe,EAAGC,GAAJ,OAAcA,EAAQ,KAC9DC,GAAaJ,MAAMC,KAAK,CAAEd,OAAQ,KAAM,SAACe,EAAGC,GAAJ,OAAcA,EAAQ,KAO9DE,GAAc,CAClB3F,OAAQ,OACRD,MAAO,QAGT,OACE,cAAC,IAAMN,SAAP,UACE,qBAAKkB,UAAU,aAAf,SACE,eAACiF,EAAA,EAAD,CAAMC,WAAS,EAAC7E,GAAI,CAAEhB,OAAQ,KAAO8F,QAAS,EAA9C,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAtB,SACE,eAACL,EAAA,EAAD,CAAMC,WAAS,EAACK,QAAS,GAAIJ,QAAS,EAAtC,UACE,eAACF,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,UACE,oDACA,4BAAIzE,EAAQ2E,qBAEd,cAACP,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,EAAf,SACE,cAACG,EAAA,EAAD,CAAaC,WAAS,EAAtB,SACE,cAACC,EAAA,EAAD,CACEtF,GAAI2E,GACJY,QAAM,EACNC,GAAG,aACHC,MAAO3E,EACPjB,QAAQ,WACR6F,MAAM,OACNC,SAtLM,SAAC5B,GACvBhD,EAAQgD,EAAE5D,OAAOsF,OACjB5D,KA6Kc,SASGwC,GAAWuB,KAAI,SAACH,GAAD,OACd,cAACI,EAAA,EAAD,CAAUJ,MAAOA,EAAjB,SAAyBA,aAKjC,cAACb,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,EAAf,SACE,cAACG,EAAA,EAAD,CAAaC,WAAS,EAAtB,SACE,cAACC,EAAA,EAAD,CACEtF,GAAI2E,GACJY,QAAM,EACNC,GAAG,aACHE,MAAM,UACN7F,QAAQ,WACR4F,MAAO7E,EACP+E,SAlMO,SAAC5B,GACxBlD,EAAQkD,EAAE5D,OAAOsF,OACjB5D,KAyLc,SASG6C,GAAWkB,KAAI,SAACH,GAAD,OACd,cAACI,EAAA,EAAD,CAAUJ,MAAOA,EAAjB,SAAyBA,aAKjC,cAACb,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,cAACa,EAAA,EAAD,CACE,aAAW,kBACXC,aAAc,EACdC,iBA1DE,SAACP,GAEjB,OADAlE,EAAkBkE,GACZ,GAAN,OAAUA,EAAV,MAyDcQ,KAAM,IACNC,OAAK,EACLjE,IAAK,IACLkE,IAAK,EACLC,kBAAkB,SAItB,cAACxB,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,cAACoB,EAAA,EAAD,CACErG,GAAI,CAAEsG,UAAW,UACjB1C,SAAWxC,EAAmB,UAAT,OAFvB,SAIIA,EAEE,qCADA,sFAIR,cAACwD,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,cAACnF,EAAA,EAAD,CACEE,GAAI2E,GACJ4B,MAAO,CAAEvH,OAAQ,OAAQD,MAAO,QAChCmB,MAAM,UACNL,QAAQ,YACRE,QAASuC,EACTkE,QAAS,cAAC,IAAD,CAAgBC,SAAS,UAClCC,SAAUtF,EAPZ,SASGZ,EAAQmG,oBAKjB,cAAC/B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAtB,SACE,cAACL,EAAA,EAAD,CAAMC,WAAS,EAACK,QAAS,GAAIJ,QAAS,EAAtC,SACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,qBAAKO,GAAG,OAAOxF,GAAI,CAAE4G,UAAW,IAAKN,UAAW,UAAhD,SACGlC,GAAKwB,KAAI,SAACiB,EAAKpC,GAAN,OACR,gCACGoC,EAAIjB,KAAI,SAAC7D,GAAD,OACP,qBACEhC,QAAS+D,GACTnE,UAAWwC,EAAaJ,GACxBwE,MAAOzE,EAAcC,GAErB,UAASA,GADJA,MAIT,yBAVQ0C,cAiBpB,cAACG,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,cAAC,OAAD,CAAM6B,GAAG,gBAAgBC,QAAQ,EAAMC,SAAU,IAAjD,SACE,cAACC,EAAA,EAAD,CAAY,aAAW,OAAO7E,KAAK,QAAnC,SACE,cAAC,IAAD,CAAyBqE,SAAS,wBC3RlD,IAAMjG,EAAUC,EAAQ,IAET,SAASyG,IA0ItB,IAzIA,MAAwB1H,mBAAS,GAAjC,mBAAOoB,EAAP,KAAaC,EAAb,KACA,EAAwBrB,mBAAS,GAAjC,mBAAOsB,EAAP,KAAaC,EAAb,KACA,EAAkCvB,mBAAS,IAA3C,mBAAOwB,EAAP,KAAkBC,EAAlB,KACA,EAA0BzB,mBAAS,GAAnC,mBACA,GADA,UACsBA,mBAAS,KAA/B,mBACA,GADA,UACwBA,mBAAS,KAAjC,mBAAO0B,EAAP,KAAaC,EAAb,KACA,EAA8B3B,oBAAS,GAAvC,mBAAO4B,EAAP,KAAgBC,EAAhB,KACA,EAA4C7B,mBAAS,GAArD,mBAAO8B,EAAP,KAAuBC,EAAvB,KACA,EAAsC/B,oBAAS,GAA/C,mBAWMgC,GAXN,UAWc,SAACC,GACb,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,QAGhDI,EAAY,WAChBZ,EAAa,IACbE,EAAQ,KAGJW,EAAgB,SAACC,GACrB,GAAIA,KAAUb,GAAwB,MAAhBA,EAAKa,GAAiB,CAC1C,IAAI7B,EAAQ,QAIZ,OAHK,GAAK8B,KAAKC,IAAInB,EAAMF,IAASM,EAAKa,GAAU,MAC/C7B,EAAQ,SAEH,CACLgC,gBAAgB,UAAD,QACZ,GAAKF,KAAKC,IAAInB,EAAMF,IAASM,EAAKa,GADtB,aAEV,KAAO,GAAKC,KAAKC,IAAInB,EAAMF,IAASM,EAAKa,GAF/B,KAGf7B,MAAOA,GAGX,MAAO,CAAEA,MAAO,UAGZiC,EAAe,SAACJ,GACpB,IACIK,EAAO,QASX,OAVatB,GAED,EACVsB,EAAO,WAHItB,GAIM,GACjBsB,EAAO,YALItB,GAMM,KACjBsB,EAAO,YAGH,YAAN,OAAmBpB,EAAUqB,SAASN,GAAU,WAAa,GAA7D,YAAmEK,IAG/D+E,EAAS,uCAAG,8BAAA5E,EAAA,6DACZC,EAAI5B,EAAO,EACX6B,EAAI3B,EAAO,EACfO,GAAW,GAHK,SAIC+F,GAAU,EAAG,EAAG5E,EAAGC,GAJpB,cAKhBpB,GAAW,GALK,2CAAH,qDAST+F,GAAS,uCAAG,WAAOrE,EAAGC,EAAGR,EAAGC,GAAhB,uCAAAF,EAAA,sDAKhB,IAJMW,EADU,YACClC,IACbqG,EAAK,IACNzE,KAAK,CAACG,EAAGC,EAAG,IACXN,EAAU,GACLC,EAAI,EAAGA,EAAI/B,EAAM+B,IAExB,IADAD,EAAQE,KAAK,IACJC,EAAI,EAAGA,EAAI/B,EAAM+B,IACxBH,EAAQC,GAAGC,MAAK,GAGpBF,EAAQK,GAAGC,IAAK,EAXA,YAaTqE,EAAG5D,OAAS,GAbH,qBAcR6D,EAAOD,EAAGE,SACP,IAAM/E,GAAK8E,EAAK,IAAM7E,EAfjB,2CAgBL,GAhBK,QAkBVV,EAASuF,EAAK,IAAM7E,EAAI,GAAK6E,EAAK,GAEtCpG,EAAKa,GAAUuF,EAAK,GACpBnG,EAAQ,eAAKD,IACbsG,QAAQC,IAAIvG,GAENwG,EAAY,CAChB,CAACJ,EAAK,GAAIA,EAAK,GAAK,GACpB,CAACA,EAAK,GAAIA,EAAK,GAAK,GACpB,CAACA,EAAK,GAAK,EAAGA,EAAK,IACnB,CAACA,EAAK,GAAK,EAAGA,EAAK,KA5BP,MA+BGI,EA/BH,6CA+BLpE,EA/BK,KAgCNC,EAAKD,EAAK,GACVE,EAAKF,EAAK,KAEdC,GAAM,GACNC,GAAM,GACND,GAAMf,GACNgB,GAAMf,IACLC,EAAQa,GAAIC,IACZN,EAAKb,SAASN,GAxCL,wBA0CVyF,QAAQC,IAAIlE,GACZiE,QAAQC,IAAIjE,GA3CF,UA4CJhC,EAAO,EAAIF,EAAkB,KA5CzB,QA6CVoB,EAAQa,GAAIC,IAAM,EAClB6D,EAAGzE,KAAK,CAACW,EAAIC,EAAI8D,EAAK,GAAK,IA9CjB,qFAkDT,GAlDS,4CAAH,4DAqDTxD,GAAY,SAACC,GACjB,IAAIC,EAAI,YAAOhD,GACfwG,QAAQC,IAAIzD,GACZwD,QAAQC,IAAI1D,EAAE5D,OAAO+D,aAAa,YAClC,IAAK,IAAIvB,EAAI,EAAGA,EAAIqB,EAAKP,OAAQd,IAAK,CAEpC,GADUqB,EAAKrB,IACJsB,SAASF,EAAE5D,OAAO+D,aAAa,YAGxC,OAFAF,EAAKG,OAAOxB,EAAG,QACf1B,EAAa+C,GAIjBA,EAAKpB,KAAKqB,SAASF,EAAE5D,OAAO+D,aAAa,aACzCjD,EAAa+C,IAGXI,GAAO,GACFzB,GAAI,EAAGA,GAAI/B,EAAM+B,KAAK,CAC7ByB,GAAKxB,KAAK,IACV,IAAK,IAAIC,GAAI,EAAGA,GAAI/B,EAAM+B,KACxBuB,GAAKzB,IAAGC,KAAK9B,EAAO6B,GAAIE,IAI5B,IAAMwB,GAAaC,MAAMC,KAAK,CAAEd,OAAQ,KAAM,SAACe,EAAGC,GAAJ,OAAcA,EAAQ,KAC9DC,GAAaJ,MAAMC,KAAK,CAAEd,OAAQ,KAAM,SAACe,EAAGC,GAAJ,OAAcA,EAAQ,KAOpE,OACE,qBAAK9E,UAAU,aAAf,SACE,eAACiF,EAAA,EAAD,CAAMC,WAAS,EAAC7E,GAAI,CAAEhB,OAAQ,KAAO8F,QAAS,EAA9C,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAtB,SACE,eAACL,EAAA,EAAD,CAAMC,WAAS,EAACK,QAAS,GAAIJ,QAAS,EAAtC,UACE,eAACF,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,UACE,sDACA,4BAAIzE,EAAQmH,qBAEd,cAAC/C,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,EAAf,SACE,cAACG,EAAA,EAAD,CAAaC,WAAS,EAAtB,SACE,cAACC,EAAA,EAAD,CACEC,QAAM,EACNC,GAAG,aACHC,MAAO3E,EACPjB,QAAQ,WACR6F,MAAM,OACNC,SA/JQ,SAAC5B,GACvBhD,EAAQgD,EAAE5D,OAAOsF,OACjB5D,KAuJY,SAQGwC,GAAWuB,KAAI,SAACH,GAAD,OACd,cAACI,EAAA,EAAD,CAAUJ,MAAOA,EAAjB,SAAyBA,aAKjC,cAACb,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,EAAf,SACE,cAACG,EAAA,EAAD,CAAaC,WAAS,EAAtB,SACE,cAACC,EAAA,EAAD,CACEC,QAAM,EACNC,GAAG,aACHE,MAAM,UACN7F,QAAQ,WACR4F,MAAO7E,EACP+E,SA3KS,SAAC5B,GACxBlD,EAAQkD,EAAE5D,OAAOsF,OACjB5D,KAmKY,SAQG6C,GAAWkB,KAAI,SAACH,GAAD,OACd,cAACI,EAAA,EAAD,CAAUJ,MAAOA,EAAjB,SAAyBA,aAKjC,cAACb,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,cAACa,EAAA,EAAD,CACE,aAAW,kBACXC,aAAc,EACdC,iBAlDI,SAACP,GAEjB,OADAlE,EAAkBkE,GACZ,GAAN,OAAUA,EAAV,MAiDYQ,KAAM,IACNC,OAAK,EACLjE,IAAK,IACLkE,IAAK,EACLC,kBAAkB,SAItB,cAACxB,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,cAACoB,EAAA,EAAD,CACErG,GAAI,CAAEsG,UAAW,UACjB1C,SAAWxC,EAAmB,UAAT,OAFvB,SAIIA,EAEE,qCADA,sFAIR,cAACwD,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,cAACnF,EAAA,EAAD,CACEI,MAAM,UACNL,QAAQ,YACR0G,MAAO,CAAEvH,OAAQ,OAAQD,MAAO,QAChCgB,QAASoH,EACTX,QAAS,cAAC,IAAD,CAAgBC,SAAS,UAClCC,SAAUtF,EANZ,SAQGZ,EAAQmG,oBAKjB,cAAC/B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAtB,SACE,cAACL,EAAA,EAAD,CAAMC,WAAS,EAACK,QAAS,GAAIJ,QAAS,EAAtC,SACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,qBACEO,GAAG,OACHxF,GAAI,CACF4G,UAAW,IACXN,UAAW,SACXsB,cAAe,UALnB,SAQGxD,GAAKwB,KAAI,SAACiB,EAAKpC,GAAN,OACR,gCACGoC,EAAIjB,KAAI,SAAC7D,GAAD,OACP,qBACEhC,QAAS+D,GACTnE,UAAWwC,EAAaJ,GACxBwE,MAAOzE,EAAcC,GAErB,UAASA,GADJA,MAKT,qCAOZ,cAAC6C,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,cAAC,OAAD,CAAM6B,GAAG,kBAAkBC,QAAQ,EAAMC,SAAU,IAAnD,SACE,cAACC,EAAA,EAAD,CAAY,aAAW,OAAO7E,KAAK,SAAnC,SACE,cAAC,IAAD,CAAyBqE,SAAS,sBCzQhD,IAAMjG,EAAUC,EAAQ,IAET,SAASoH,IA2LtB,IA1LA,MAAwBrI,mBAAS,GAAjC,mBAAOoB,EAAP,KAAaC,EAAb,KACA,EAAwBrB,mBAAS,GAAjC,mBAAOsB,EAAP,KAAaC,EAAb,KACA,EAAkCvB,mBAAS,IAA3C,mBAAkByB,GAAlB,WACA,EAA0BzB,mBAAS,GAAnC,mBACA,GADA,UACsBA,mBAAS,KAA/B,mBACA,GADA,UACwBA,mBAAS,KAAjC,mBAAO0B,EAAP,KAAaC,EAAb,KACA,EAA8B3B,oBAAS,GAAvC,mBAAO4B,EAAP,KAAgBC,EAAhB,KACA,EAA4C7B,mBAAS,GAArD,mBAAO8B,EAAP,KAAuBC,EAAvB,KACA,EAAwC/B,mBAAS,QAAjD,mBAAOsI,EAAP,KAAqBC,EAArB,KACA,EAAgCvI,mBAAS,CACvC,CAAC,IAAK,IAAK,IAAK,IAAK,KACrB,CAAC,IAAK,IAAK,IAAK,IAAK,KACrB,CAAC,IAAK,IAAK,IAAK,IAAK,KACrB,CAAC,IAAK,IAAK,IAAK,IAAK,KACrB,CAAC,IAAK,IAAK,IAAK,IAAK,OALvB,mBAAOwI,EAAP,KAAiBC,EAAjB,KAsBMzG,GAAQ,SAACC,GACb,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAGhDI,GAAY,WAChBZ,EAAa,KAGTkB,GAAe,SAACJ,GACpB,IACIK,EAAO,QASX,OAVatB,GAED,EACVsB,EAAO,WAHItB,GAIM,GACjBsB,EAAO,YALItB,GAMM,KACjBsB,EAAO,YAGH,YAAN,OAAmBA,IAGfN,GAAgB,SAACC,GACrB,GAAIA,KAAUb,GAAwB,MAAhBA,EAAKa,GAAiB,CAC1C,IAAI7B,EAAQ,QAIZ,OAHK,GAAK8B,KAAKC,IAAInB,EAAMF,IAASM,EAAKa,GAAU,MAC/C7B,EAAQ,SAEH,CACLgC,gBAAgB,UAAD,QACZ,GAAKF,KAAKC,IAAInB,EAAMF,IAASM,EAAKa,GADtB,aAEV,KAAO,GAAKC,KAAKC,IAAInB,EAAMF,IAASM,EAAKa,GAF/B,KAGf7B,MAAOA,GAGX,MAAO,CAAEA,MAAO,UAGZoC,GAAS,uCAAG,sCAAAC,EAAA,sDAEhB,IADIG,EAAU,GACLC,EAAI,EAAGA,EAAI/B,EAAM+B,IAExB,IADAD,EAAQE,KAAK,IACJC,EAAI,EAAGA,EAAI/B,EAAM+B,IACxBH,EAAQC,GAAGC,MAAK,GAGpBvB,GAAW,GACFsB,EAAI,EATG,YASAA,EAAI7B,GATJ,iBAUL+B,EAAI,EAVC,YAUEA,EAAIjC,GAVN,oBAWRoH,EAASrF,GAAGE,IAAMiF,EAAa,GAXvB,kCAYOhF,GAAUJ,EAASC,EAAGE,EAAG,GAZhC,aAYNqF,EAZM,gCAcR7G,GAAW,GAdH,kBAeD6G,GAfC,QAiBVV,QAAQC,IAAIS,GACZrG,KAlBU,QAUYgB,IAVZ,uBASUF,IATV,uBAuBhBtB,GAAW,GAvBK,4CAAH,qDA0BTyB,GAAS,uCAAG,WAAOJ,EAASK,EAAGC,EAAGC,GAAtB,iCAAAV,EAAA,yDACZC,EAAI5B,EAAO,EACX6B,EAAI3B,EAAO,EACXmC,GAAK6E,EAAarE,OAAS,EAHf,uBAKdvC,EADa6B,GAAKN,EAAI,GAAKO,GACZC,EACf9B,EAAQ,eAAKD,IANC,mBAQP,GARO,UAUdsG,QAAQC,IAAIxE,GACNkF,EAAeL,EAAa7E,EAAI,GAClClB,EAASgB,GAAKN,EAAI,GAAKO,EAC3BN,EAAQK,GAAGC,IAAK,EAE0C,MAAtDG,SAASC,cAAT,uBAAuCrB,EAAvC,OAfU,2CAgBL,GAhBK,QAmBdb,EAAKa,GAAUkB,EACf9B,EAAQ,eAAKD,IASTmC,GAAc,EA7BJ,MAuBE,CACd,CAACN,EAAI,EAAGC,GACR,CAACD,EAAI,EAAGC,GACR,CAACD,EAAGC,EAAI,GACR,CAACD,EAAGC,EAAI,IA3BI,6CA+BLM,EA/BK,KAgCRC,EAAKD,EAAK,GACVE,EAAKF,EAAK,KACVC,GAAMb,EAAQe,QAAUD,GAAMd,EAAQ,GAAGe,QAlCjC,2DAqCZ+D,QAAQC,IAAIU,GACR5E,GAAM,GAAKC,GAAM,GAAKD,GAAMd,GAAKc,GAAMf,GACzCgF,QAAQC,IAAIO,EAASzE,GAAIC,MAIzBD,GAAM,GACNC,GAAM,GACND,GAAMd,GACNc,GAAMf,IACLE,EAAQa,GAAIC,IACb2E,GAAgBH,EAASzE,GAAIC,GAhDnB,kCAkDJhC,GAAO,EAAIF,EAAkB,KAlDzB,yBAmDUwB,GAAUJ,EAASa,EAAIC,EAAIP,EAAI,GAnDzC,aAmDVI,EAnDU,4FA0DdX,EAAQK,GAAGC,IAAK,EACXK,EA3DS,kCA4DN7B,GAAO,EAAIF,EAAkB,KA5DvB,QA6DZJ,EAAKa,GAAU,KACfZ,EAAQ,eAAKD,IACbU,YAAW,WACT4F,QAAQC,IAAIvG,KACX,IACHsG,QAAQC,IAAI1F,KAAUb,GAAwB,MAAhBA,EAAKa,IAlEvB,iCAoEPsB,GApEO,4CAAH,4DAwET+E,GAAe,WACnB,IAAMC,EAAW,6BACjB,OAAOA,EAASrG,KAAKsG,MAAMtG,KAAKuG,SAAWF,EAAS5E,UAelDW,GAAO,GAEFzB,GAAI,EAAGA,GAAI/B,EAAM+B,KAAK,CAC7ByB,GAAKxB,KAAK,IACV,IAAK,IAAIC,GAAI,EAAGA,GAAI/B,EAAM+B,KACxBuB,GAAKzB,IAAGC,KAAK9B,EAAO6B,GAAIE,IAI5B,IAAMwB,GAAaC,MAAMC,KAAK,CAAEd,OAAQ,KAAM,SAACe,EAAGC,GAAJ,OAAcA,EAAQ,KAC9DC,GAAaJ,MAAMC,KAAK,CAAEd,OAAQ,KAAM,SAACe,EAAGC,GAAJ,OAAcA,EAAQ,KAO9DE,GAAc,CAClB3F,OAAQ,OACRD,MAAO,QAGT,OACE,cAAC,IAAMN,SAAP,UACE,qBAAKkB,UAAU,aAAf,SACE,eAACiF,EAAA,EAAD,CAAMC,WAAS,EAAC7E,GAAI,CAAEhB,OAAQ,KAAO8F,QAAS,EAA9C,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAtB,SACE,eAACL,EAAA,EAAD,CAAMC,WAAS,EAACK,QAAS,GAAIJ,QAAS,EAAtC,UACE,eAACF,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,UACE,yDACA,mBAAGtF,UAAU,UAAb,SAAwBa,EAAQgI,wBAElC,cAAC5D,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,EAAf,SACE,cAACG,EAAA,EAAD,CAAaC,WAAS,EAAtB,SACE,cAACC,EAAA,EAAD,CACEtF,GAAI2E,GACJY,QAAM,EACNC,GAAG,aACHC,MAAO3E,EACPjB,QAAQ,WACR6F,MAAM,OACNC,SAhNM,SAAC5B,GACvBhD,EAAQgD,EAAE5D,OAAOsF,OACjB5D,MAuMc,SASGwC,GAAWuB,KAAI,SAACH,GAAD,OACd,cAACI,EAAA,EAAD,CAAUJ,MAAOA,EAAjB,SAAyBA,aAKjC,cAACb,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,EAAf,SACE,cAACG,EAAA,EAAD,CAAaC,WAAS,EAAtB,SACE,cAACC,EAAA,EAAD,CACEtF,GAAI2E,GACJY,QAAM,EACNC,GAAG,aACHE,MAAM,UACN7F,QAAQ,WACR4F,MAAO7E,EACP+E,SA5NO,SAAC5B,GACxBlD,EAAQkD,EAAE5D,OAAOsF,OACjB5D,MAmNc,SASG6C,GAAWkB,KAAI,SAACH,GAAD,OACd,cAACI,EAAA,EAAD,CAAUJ,MAAOA,EAAjB,SAAyBA,aAKjC,cAACb,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,cAACa,EAAA,EAAD,CACE,aAAW,kBACXC,aAAc,EACdC,iBA1DE,SAACP,GAEjB,OADAlE,EAAkBkE,GACZ,GAAN,OAAUA,EAAV,MAyDcQ,KAAM,IACNC,OAAK,EACLjE,IAAK,IACLkE,IAAK,EACLC,kBAAkB,SAGtB,cAACxB,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,EAAf,SACE,cAACK,EAAA,EAAD,CACEtF,GAAI2E,GACJ4B,MAAO,CAAEvH,OAAQ,OAAQD,MAAO,QAChCc,QAAQ,WACR6F,MAAM,gBACNC,SAjPe,SAAC5B,GAC9BgE,EAAgBhE,EAAE5D,OAAOsF,YAmPf,cAACb,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,EAAf,SACE,cAACnF,EAAA,EAAD,CACEE,GAAI2E,GACJ4B,MAAO,CAAEvH,OAAQ,OAAQD,MAAO,QAChCmB,MAAM,YACNL,QAAQ,YACRE,QAzGK,WAEnB,IADA,IAAI0I,EAAU,GACL9F,EAAI,EAAGA,EAAI/B,EAAM+B,IAAK,CAC7B8F,EAAQ7F,KAAK,IACb,IAAK,IAAIC,EAAI,EAAGA,EAAI/B,EAAM+B,IACxB4F,EAAQ9F,GAAGC,KAAKwF,MAGpBH,EAAYQ,GACZjB,QAAQC,IAAIgB,IAiGEjC,QAAS,cAAC,IAAD,CAAgBC,SAAS,UANpC,SAQGjG,EAAQkI,uBAGb,cAAC9D,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,cAACoB,EAAA,EAAD,CACErG,GAAI,CAAEsG,UAAW,UACjB1C,SAAWxC,EAAmB,UAAT,OAFvB,SAIIA,EAEE,qCADA,sFAIR,cAACwD,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,cAACnF,EAAA,EAAD,CACEE,GAAI2E,GACJ4B,MAAO,CAAEvH,OAAQ,OAAQD,MAAO,QAChCmB,MAAM,UACNL,QAAQ,YACRE,QAASuC,GACTkE,QAAS,cAAC,IAAD,CAAgBC,SAAS,UAClCC,SAAUtF,EAPZ,SASGZ,EAAQmG,oBAKjB,cAAC/B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAtB,SACE,cAACL,EAAA,EAAD,CAAMC,WAAS,EAACK,QAAS,GAAIJ,QAAS,EAAtC,SACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,qBAAKO,GAAG,OAAOxF,GAAI,CAAE4G,UAAW,IAAKN,UAAW,UAAhD,SACGlC,GAAKwB,KAAI,SAACiB,EAAKpC,GAAN,OACR,gCACGoC,EAAIjB,KAAI,SAAC7D,EAAQ4G,GAAT,OACP,qBACEhJ,UAAWwC,KACXoE,MAAOzE,GAAcC,GAErB,UAASA,EAJX,SAMGiG,EAASvD,GAAOkE,IAHZ5G,MAMT,qCAOZ,cAAC6C,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,cAAC,OAAD,CAAM6B,GAAG,cAAcC,QAAQ,EAAMC,SAAU,IAA/C,SACE,cAACC,EAAA,EAAD,CAAY,aAAW,OAAO7E,KAAK,QAAnC,SACE,cAAC,IAAD,CAAyBqE,SAAS,wB,sBCjV5CjG,EAAUC,EAAQ,IAET,SAASmI,IAgLtB,IA/KA,MAAwBpJ,mBAAS,GAAjC,mBAAOoB,EAAP,KAAaC,EAAb,KACA,EAAwBrB,mBAAS,GAAjC,mBAAOsB,EAAP,KAAaC,EAAb,KACA,EAAkCvB,mBAAS,IAA3C,mBAAOwB,EAAP,KAAkBC,EAAlB,KACA,EAA0BzB,mBAAS,GAAnC,mBAAOqJ,EAAP,KAAcC,EAAd,KACA,EAAsBtJ,mBAAS,IAA/B,mBAAOuJ,EAAP,KAAYC,EAAZ,KACA,EAAwBxJ,mBAAS,IAAjC,mBAAO0B,EAAP,KAAaC,EAAb,KACA,EAA8B3B,oBAAS,GAAvC,mBAAO4B,EAAP,KAAgBC,EAAhB,KACA,EAA4C7B,mBAAS,GAArD,mBAAO8B,EAAP,KAAuBC,EAAvB,KACA,EAAwC/B,mBAAS,aAAjD,mBAAOyJ,EAAP,KAAqBC,EAArB,KACA,GAAsB1J,mBAAS,GAA/B,qBAAO2J,GAAP,MAAYC,GAAZ,MAsBM5H,GAAQ,SAACC,GACb,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAGhDI,GAAY,WAChBZ,EAAa,IACbE,EAAQ,KAGJW,GAAgB,SAACC,GACrB,GAAIA,KAAUb,GAAwB,MAAhBA,EAAKa,GAAiB,CAC1C,IAAI7B,EAAQ,QAKZ,OAJK,GAAK8B,KAAKC,IAAInB,EAAMF,IAASM,EAAKa,GAAU,MAC/C7B,EAAQ,SAGH,CACLgC,gBAAgB,UAAD,QACZ,GAAKF,KAAKC,IAAInB,EAAMF,IAASM,EAAKa,GADtB,aAEV,KAAO,GAAKC,KAAKC,IAAInB,EAAMF,IAASM,EAAKa,GAF/B,KAGf7B,MAAOA,GAIX,OAAI6B,GAAU8G,EACL,CACL3G,gBAAgB,SAETH,GAAUgH,EACZ,CACL7G,gBAAiB,OAGd,CAAEhC,MAAO,UAGZiC,GAAe,SAACJ,GACpB,IACIK,EAAO,QASX,OAVatB,GAED,EACVsB,EAAO,WAHItB,GAIM,GACjBsB,EAAO,YALItB,GAMM,KACjBsB,EAAO,YAGH,YAAN,OAAmBpB,EAAUqB,SAASN,GAAU,WAAa,GAA7D,YAAmEK,IAG/D+E,GAAS,uCAAG,8BAAA5E,EAAA,6DACZC,EAAI5B,EAAO,EACX6B,EAAI3B,EAAO,EACfO,GAAW,GAHK,SAIC+F,GAAU,EAAG,EAAG5E,EAAGC,GAJpB,cAKhBpB,GAAW,GALK,2CAAH,qDAST+F,GAAS,uCAAG,WAAOrE,EAAGC,EAAGR,EAAGC,GAAhB,uCAAAF,EAAA,sDAKhB,IAJMW,EADU,YACClC,IACbqG,EAAK,IACNzE,KAAK,CAACG,EAAGC,EAAG,IACXN,EAAU,GACLC,EAAI,EAAGA,EAAI/B,EAAM+B,IAExB,IADAD,EAAQE,KAAK,IACJC,EAAI,EAAGA,EAAI/B,EAAM+B,IACxBH,EAAQC,GAAGC,MAAK,GAGpBF,EAAQK,GAAGC,IAAK,EAXA,YAaTqE,EAAG5D,OAAS,GAbH,qBAcR6D,EAAOD,EAAGE,SACP,IAAM/E,GAAK8E,EAAK,IAAM7E,EAfjB,2CAgBL,GAhBK,QAkBVV,EAASuF,EAAK,IAAM7E,EAAI,GAAK6E,EAAK,GAEtCpG,EAAKa,GAAUuF,EAAK,GACpBnG,EAAQ,eAAKD,IACbsG,QAAQC,IAAIvG,GAENwG,EAAY,CAChB,CAACJ,EAAK,GAAIA,EAAK,GAAK,GACpB,CAACA,EAAK,GAAIA,EAAK,GAAK,GACpB,CAACA,EAAK,GAAK,EAAGA,EAAK,IACnB,CAACA,EAAK,GAAK,EAAGA,EAAK,KA5BP,MA+BGI,EA/BH,6CA+BLpE,EA/BK,KAgCNC,EAAKD,EAAK,GACVE,EAAKF,EAAK,KAEdC,GAAM,GACNC,GAAM,GACND,GAAMf,GACNgB,GAAMf,IACLC,EAAQa,GAAIC,IACZN,EAAKb,SAASN,GAxCL,wBA0CVyF,QAAQC,IAAIlE,GACZiE,QAAQC,IAAIjE,GA3CF,UA4CJhC,GAAO,EAAIF,EAAkB,KA5CzB,QA6CVoB,EAAQa,GAAIC,IAAM,EAClB6D,EAAGzE,KAAK,CAACW,EAAIC,EAAI8D,EAAK,GAAK,IA9CjB,qFAkDT,GAlDS,4CAAH,4DAqDTxD,GAAY,SAACC,GACjB,IAAIC,EAAI,YAAOhD,GAQTqI,EANM,CACVR,MAAOC,EACPC,IAAKC,EACLhI,UAAWC,GAGYgI,GACzBzB,QAAQC,IAAI4B,GACZ,IAAK,IAAI1G,EAAI,EAAGA,EAAIqB,EAAKP,OAAQd,IAAK,CAEpC,GADUqB,EAAKrB,IACJsB,SAASF,EAAE5D,OAAO+D,aAAa,YAGxC,OAFAF,EAAKG,OAAOxB,EAAG,QACf0G,EAAarF,GAIjBA,EAAKpB,KAAKqB,SAASF,EAAE5D,OAAO+D,aAAa,aACzCmF,EAAarF,IAGTK,GAAaC,MAAMC,KAAK,CAAEd,OAAQ,KAAM,SAACe,EAAGC,GAAJ,OAAcA,EAAQ,KAC9DC,GAAaJ,MAAMC,KAAK,CAAEd,OAAQ,KAAM,SAACe,EAAGC,GAAJ,OAAcA,EAAQ,KAOhEL,GAAO,GACFzB,GAAI,EAAGA,GAAI/B,EAAM+B,KAAK,CAC7ByB,GAAKxB,KAAK,IACV,IAAK,IAAIC,GAAI,EAAGA,GAAI/B,EAAM+B,KACxBuB,GAAKzB,IAAGC,KAAK9B,EAAO6B,GAAIE,IA2B5B,OACE,qBAAKlD,UAAU,aAAf,SACE,eAACiF,EAAA,EAAD,CAAMC,WAAS,EAAC7E,GAAI,CAAEhB,OAAQ,KAAO8F,QAAS,EAA9C,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAtB,SACE,qBAAKsB,MAAO,CAAEqB,cAAe,SAAUtB,UAAW,UAAlD,SACE,eAAC1B,EAAA,EAAD,CAAMC,WAAS,EAAC7E,GAAI,CAAEhB,OAAQ,KAAO8F,QAAS,EAA9C,UACE,eAACF,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,UACE,oEACA,mBAAGtF,UAAU,UAAb,SAAwBa,EAAQmH,qBAElC,cAAC/C,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,EAAf,SACE,cAACG,EAAA,EAAD,CAAaC,WAAS,EAAtB,SACE,cAACC,EAAA,EAAD,CACEC,QAAM,EACNC,GAAG,aACHC,MAAO3E,EACPjB,QAAQ,WACR6F,MAAM,OACNC,SApNM,SAAC5B,GACvBhD,EAAQgD,EAAE5D,OAAOsF,OACjB5D,MA4Mc,SAQGwC,GAAWuB,KAAI,SAACH,GAAD,OACd,cAACI,EAAA,EAAD,CAAUJ,MAAOA,EAAjB,SAAyBA,aAKjC,cAACb,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,EAAf,SACE,cAACG,EAAA,EAAD,CAAaC,WAAS,EAAtB,SACE,cAACC,EAAA,EAAD,CACEC,QAAM,EACNC,GAAG,aACHE,MAAM,UACN7F,QAAQ,WACR4F,MAAO7E,EACP+E,SA/NO,SAAC5B,GACxBlD,EAAQkD,EAAE5D,OAAOsF,OACjB5D,MAuNc,SAQG6C,GAAWkB,KAAI,SAACH,GAAD,OACd,cAACI,EAAA,EAAD,CAAUJ,MAAOA,EAAjB,SAAyBA,aAKjC,cAACb,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,EAAf,SACE,cAACK,EAAA,EAAD,CACEiB,MAAO,CAAEvH,OAAQ,OAAQD,MAAO,QAChCc,QAAQ,WACR6F,MAAM,qBACNC,SAvOQ,SAAC5B,GACvByD,QAAQC,IAAI1D,EAAE5D,OAAOsF,OACrB2D,GAAOnF,SAASF,EAAE5D,OAAOsF,aAwOf,cAACb,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,EAAf,SACE,cAACnF,EAAA,EAAD,CACEI,MAAM,UACNL,QAAQ,YACR0G,MAAO,CAAEvH,OAAQ,OAAQD,MAAO,QAChCgB,QA1EgB,WAC9B,IAAIuJ,EAAOH,GACX3B,QAAQC,IAAI6B,GACZ,IAAItF,EAAO,GAEX,KAAIlD,EAAOF,EAAOI,EAAUyC,OAAS6F,GAArC,CAGA,KAAOA,EAAO,GAAG,CACf,IAAIC,GAbKpD,EAacrF,EAAOF,EAZzBoB,KAAKsG,MAAMtG,KAAKuG,SAAWpC,IAa3BnC,EAAK3B,SAASkH,KACjBvF,EAAKpB,KAAK2G,KACRD,GAEJ9B,QAAQC,IAAI6B,GAlBJ,IAACnD,EAoBXlF,EAAa+C,KA2DCwC,QAAS,cAAC,IAAD,CAAgBC,SAAS,UALpC,SAOG,UAGL,cAAC7B,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,cAACa,EAAA,EAAD,CACE,aAAW,kBACXC,aAAc,EACdC,iBArGE,SAACP,GAEjB,OADAlE,EAAkBkE,GACZ,GAAN,OAAUA,EAAV,MAoGcQ,KAAM,IACNC,OAAK,EACLjE,IAAK,IACLkE,IAAK,EACLC,kBAAkB,SAItB,cAACxB,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,cAACoB,EAAA,EAAD,CACErG,GAAI,CAAEsG,UAAW,UACjB1C,SAAWxC,EAAmB,UAAT,OAFvB,SAIIA,EAEE,qCADA,sFAIR,cAACwD,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,cAACnF,EAAA,EAAD,CACEI,MAAM,UACNL,QAAQ,YACR0G,MAAO,CAAEvH,OAAQ,OAAQD,MAAO,QAChCgB,QAASoH,GACTX,QAAS,cAAC,IAAD,CAAgBC,SAAS,UAClCC,SAAUtF,EANZ,SAQGZ,EAAQmG,sBAMnB,cAAC/B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAtB,SACE,eAACL,EAAA,EAAD,CAAMC,WAAS,EAACK,QAAS,GAAIJ,QAAS,EAAtC,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,eAACuE,EAAA,EAAD,CACE/D,MAAOwD,EACPQ,WAAS,EACT9D,SA5RmB,SAAC5B,GAChCyD,QAAQC,IAAI1D,EAAE5D,OAAOsF,OACrByD,EAAgBnF,EAAE5D,OAAOsF,QA2Rb,aAAW,iBAJb,UAME,cAACiE,EAAA,EAAD,CAAcjE,MAAM,QAAQ,aAAW,eAAvC,gCAGA,cAACiE,EAAA,EAAD,CAAcjE,MAAM,YAAY,aAAW,WAA3C,2BAGA,cAACiE,EAAA,EAAD,CAAcjE,MAAM,MAAM,aAAW,gBAArC,mCAKJ,cAACb,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,SACE,qBAAKsB,MAAO,CAAEqB,cAAe,SAAUtB,UAAW,UAAlD,SACE,qBAAKd,GAAG,OAAOxF,GAAI,CAAE4G,UAAW,IAAKN,UAAW,UAAhD,SACGlC,GAAKwB,KAAI,SAACiB,EAAKpC,GAAN,OACR,gCACGoC,EAAIjB,KAAI,SAAC7D,GAAD,OACP,qBACEhC,QAAS+D,GACTnE,UAAWwC,GAAaJ,GACxBwE,MAAOzE,GAAcC,GAErB,UAASA,EALX,SAOGA,KAAUb,IAASF,EAAUqB,SAASN,GAAtC,UACMb,EAAKa,IACR,IALCA,MAST,6C,OCvVNtB,EAAQ,IA0JTkJ,MAxJf,SAAoBhJ,GAClB,MAA8BnB,mBAAS,GAAvC,mBACA,GADA,UAC8BA,mBAAS,IAAvC,mBACA,GADA,UACkCA,mBAAS,KAA3C,mBAAOoK,EAAP,KAAkBC,EAAlB,KAsBMC,GApBUC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMlF,QAAQ,IAE7BuF,MAAM,aACJH,SAAU,EACVI,QAAS,QACRN,EAAMO,YAAYC,GAAG,MAAQ,CAC5BF,QAAS,cASG,CAChBA,QAAS,OACTG,eAAgB,SAChBC,WAAY,WAsCd,OACE,eAAC,IAAMjM,SAAP,WAEE,cAAC,EAAD,IACA,qBAAK8H,MAAO,CAAErB,QAAS,QAAvB,SACE,eAACN,EAAA,EAAD,CAAMC,WAAS,EAAC7E,GAAI,CAAEhB,OAAQ,KAAO8F,QAAS,EAAG7E,OAAQ,GAAzD,UACE,cAAC2E,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IA4DtB,eAACL,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAf,UACE,yBAASsB,MAAOuD,EAAWtE,GAAG,cAA9B,SACE,cAAC9E,EAAD,CAAYiD,OAvGT,SAACgH,GACd,IAAIC,EAAI,YAAOhB,GACfgB,EAAKhI,KAAK+H,GACVnD,QAAQC,IAAImD,GACZf,EAAae,QAqGL,yBAASrE,MAAOuD,EAAWtE,GAAG,gBAA9B,SACE,cAAC0B,EAAD,MAEF,yBAASX,MAAOuD,EAAWtE,GAAG,kBAA9B,SACE,cAACqC,EAAD,MAEF,yBAAStB,MAAOuD,EAAWtE,GAAG,oBAA9B,SACE,cAACoD,EAAD,kB,yBC1Jd,SAASiC,IACP,IAAMC,EAA8B,qBAAXC,OACzB,EAAoCvL,mBAAS,CAC3CT,MAAO+L,EAAYC,OAAOC,WAAa,KACvChM,OAAQ8L,EAAYC,OAAOE,YAAc,OAF3C,mBAAOC,EAAP,KAKMlB,GALN,KAKcmB,YAAY,CACxBC,WAAY,CACVC,WAAY,YAIhB,OACE,cAACC,EAAA,EAAD,CAAetB,MAAOA,EAAtB,SACE,qBAAKrK,UAAU,MAAf,SACE,cAAC,EAAD,CAAY4L,KAAML,QAM1B,IAAMM,EAAcrI,SAASsI,eAAe,QAC5CC,IAASC,OAAO,cAAC,EAAD,IAASH,GAEVX,QCvBAe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdH,IAASC,OACP,cAAC,IAAMU,WAAP,UACE,cAAC,EAAD,MAEFlJ,SAASsI,eAAe,SAM1BG,K","file":"static/js/main.d50eb4af.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Typography, Divider } from \"@material-ui/core\";\r\nimport \"./../App.css\";\r\nconst dividerStyle = {\r\n  margin: 5,\r\n};\r\nexport default function Instructions() {\r\n  return <React.Fragment></React.Fragment>;\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Button, Modal, Box, ButtonGroup } from \"@material-ui/core\";\r\nimport \"./../App.css\";\r\nimport Instructions from \"./instructions\";\r\n\r\nconst modalStyle = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: \"50vw\",\r\n  height: \"70vh\",\r\n  overflow: \"auto\",\r\n  bgcolor: \"background.paper\",\r\n  borderRadius: 8,\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nfunction Header() {\r\n  const rows = 20;\r\n  const cols = 12;\r\n  const canvasRef = useRef(null);\r\n  var delta = 0;\r\n  const [open, setOpen] = useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const [worms, setWorms] = useState([\r\n    [\r\n      [1, 2],\r\n      [1, 3],\r\n      [2, 3],\r\n      [3, 3],\r\n    ],\r\n  ]);\r\n\r\n  const anim = (time) => {\r\n    if (time - delta > 500) {\r\n      console.log(time);\r\n      delta += 500;\r\n      var tempWorms = [...worms];\r\n      for (var i = 0; i < tempWorms.length; i++) {\r\n        tempWorms[i].shift();\r\n        let worm = tempWorms[i];\r\n        var potentials = [];\r\n        var steps = [\r\n          [-1, 0],\r\n          [1, 0],\r\n          [0, -1],\r\n          [0, 1],\r\n        ];\r\n        for (var step of steps) {\r\n          const nx = worm[worm.length - 1][0] + step[0];\r\n          const ny = worm[worm.length - 1][1] + step[1];\r\n          if (nx > 0 && nx < rows && ny > 0 && nx < cols) {\r\n            potentials.push([nx, ny]);\r\n          }\r\n        }\r\n        tempWorms[i].push(\r\n          potentials[Math.floor(Math.random() * potentials.length)]\r\n        );\r\n      }\r\n      setWorms([...tempWorms]);\r\n      plot();\r\n    }\r\n    requestAnimationFrame(anim);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //     while(canvasRef.current == null) {\r\n  //         setTimeout(() => {}, 200);\r\n  //     }\r\n  //     requestAnimationFrame(anim);\r\n\r\n  // }, []);\r\n\r\n  const plot = () => {\r\n    const canvas = canvasRef.current;\r\n    if (canvas != null && canvas != undefined) {\r\n      const context = canvas.getContext(\"2d\");\r\n      const width = context.canvas.width;\r\n      const height = context.canvas.height;\r\n      const rstep = (width - 20) / 20;\r\n      const cstep = (height - 16) / 12;\r\n\r\n      context.clearRect(0, 0, width, height);\r\n\r\n      for (var worm of worms) {\r\n        console.log(worm);\r\n        if (worm.length > 1) {\r\n          context.beginPath();\r\n          context.moveTo(10 + worm[0][0] * rstep, 8 + worm[0][1] * cstep);\r\n          for (var i = 1; i < worm.length; i++) {\r\n            context.lineTo(10 + worm[i][0] * rstep, 8 + worm[i][1] * cstep);\r\n            context.stroke();\r\n            context.moveTo(10 + worm[i][0] * rstep, 8 + worm[i][1] * cstep);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    // <div>\r\n    // <div style={{height: \"100%\", justifyContent: \"center\", textAlign: \"center\"}} id='header-container'>\r\n    //     <canvas height=\"700px\" width=\"1500px\" ref={canvasRef} style={{backgroundColor: \"white\"}} ></canvas>\r\n    //     <div id=\"overlay\">\r\n    //         yessir bro\r\n    //     </div>\r\n    // </div>\r\n    // </div>\r\n    <React.Fragment>\r\n      <div className=\"outer-header-div\">\r\n        <div className=\"header-div\">\r\n          <h1 className=\"header-text\">Graph Algorithm Visualizer</h1>\r\n          <h3 className=\"secondary-header-text\">Srikant Vasudevan</h3>\r\n          <ButtonGroup variant=\"text\" aria-label=\"text button group\">\r\n            <Button\r\n              onClick={handleOpen}\r\n              sx={{ margin: \"2px\" }}\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n            >\r\n              How to use\r\n            </Button>\r\n            <Button\r\n              sx={{ margin: \"10px\" }}\r\n              color=\"secondary\"\r\n              variant=\"contained\"\r\n              target=\"_blank\"\r\n              href=\"https://www.github.com/srikantv03/graph-visualizer\"\r\n            >\r\n              Source Code\r\n            </Button>\r\n          </ButtonGroup>\r\n          <div>\r\n            <Modal\r\n              open={open}\r\n              onClose={handleClose}\r\n              aria-labelledby=\"modal-modal-title\"\r\n              aria-describedby=\"modal-modal-description\"\r\n            >\r\n              <Box sx={modalStyle}>\r\n                {/*\r\n                                    TODO: move the following instructions into the instructions component and use env to store the actual text\r\n                                */}\r\n                <Instructions />\r\n              </Box>\r\n            </Modal>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  IconButton,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  MenuItem,\r\n  Grid,\r\n  Slider,\r\n} from \"@material-ui/core\";\r\nimport ArrowDropDownCircleIcon from \"@mui/icons-material/ArrowDropDownCircle\";\r\nimport { Alert } from \"@mui/material\";\r\nimport { Link } from \"react-scroll\";\r\nimport \"./../../App.css\";\r\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\";\r\n\r\nconst strings = require(\"./../../static/strings.json\");\r\n\r\nexport default function DepthFirst(props) {\r\n  const [cols, setCols] = useState(5);\r\n  const [rows, setRows] = useState(5);\r\n  const [obstacles, setObstacles] = useState([]);\r\n  const [start, setStart] = useState(0);\r\n  const [end, setEnd] = useState(24);\r\n  const [path, setPath] = useState({});\r\n  const [running, setRunning] = useState(false);\r\n  const [animationSpeed, setAnimationSpeed] = useState(1);\r\n\r\n  const handleRowChange = (e) => {\r\n    setRows(e.target.value);\r\n    clearGrid();\r\n  };\r\n\r\n  const handleColsChange = (e) => {\r\n    setCols(e.target.value);\r\n    clearGrid();\r\n  };\r\n\r\n  const sleep = (milliseconds) => {\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n  };\r\n\r\n  const clearGrid = () => {\r\n    setObstacles([]);\r\n  };\r\n\r\n  const getPathColors = (cellId) => {\r\n    if (cellId in path && path[cellId] != null) {\r\n      let color = \"black\";\r\n      if ((15 - Math.min(rows, cols)) * path[cellId] < 128) {\r\n        color = \"white\";\r\n      }\r\n      return {\r\n        backgroundColor: `rgb(0, ${\r\n          (15 - Math.min(rows, cols)) * path[cellId]\r\n        }, ${255 - (15 - Math.min(rows, cols)) * path[cellId]})`,\r\n        color: color,\r\n      };\r\n    }\r\n    return { color: \"black\" };\r\n  };\r\n\r\n  const getClassName = (cellId) => {\r\n    const comp = rows;\r\n    let size = \"gi-xs\";\r\n    if (comp <= 5) {\r\n      size = \"gi-large\";\r\n    } else if (comp <= 10) {\r\n      size = \"gi-medium\";\r\n    } else if (comp <= 15) {\r\n      size = \"gi-small\";\r\n    }\r\n\r\n    return `gridItem ${obstacles.includes(cellId) ? \"obstacle\" : \"\"} ${size}`;\r\n  };\r\n\r\n  const dfsSearch = async () => {\r\n    var m = cols - 1;\r\n    var n = rows - 1;\r\n    var visited = [];\r\n    for (var i = 0; i < cols; i++) {\r\n      visited.push([]);\r\n      for (var j = 0; j < rows; j++) {\r\n        visited[i].push(false);\r\n      }\r\n    }\r\n    setRunning(true);\r\n    var rval = await dfsHelper(visited, 0, 0, m, n, 0);\r\n    setRunning(false);\r\n    setObstacles([]);\r\n  };\r\n\r\n  const dfsHelper = async (visited, x, y, m, n, v) => {\r\n    const obst = [...obstacles];\r\n    var cellId = x * (n + 1) + y;\r\n    if (x == m && y == n) {\r\n      let cellId = x * (n + 1) + y;\r\n      path[cellId] = v;\r\n      setPath({ ...path });\r\n\r\n      return true;\r\n    } else {\r\n      visited[x][y] = true;\r\n      if (document.querySelector(`div[data-id='${cellId}']`) == null) {\r\n        return false;\r\n      }\r\n\r\n      path[cellId] = v;\r\n      setPath({ ...path });\r\n\r\n      setTimeout(() => {}, 1000);\r\n      var nextMoves = [\r\n        [x - 1, y],\r\n        [x + 1, y],\r\n        [x, y - 1],\r\n        [x, y + 1],\r\n      ];\r\n      var returnValue = false;\r\n\r\n      for (var move of nextMoves) {\r\n        var nx = move[0];\r\n        var ny = move[1];\r\n        if (nx >= visited.length || ny >= visited[0].length) {\r\n          continue;\r\n        }\r\n        if (\r\n          nx >= 0 &&\r\n          ny >= 0 &&\r\n          nx <= n &&\r\n          nx <= m &&\r\n          !visited[nx][ny] &&\r\n          obst.indexOf(nx * (n + 1) + ny) == -1\r\n        ) {\r\n          await sleep((1 / animationSpeed) * 250);\r\n          props.addLog({\r\n            severity: returnValue ? \"success\" : \"warning\",\r\n            details: `(${nx}, ${ny})`,\r\n          });\r\n          returnValue = await dfsHelper(visited, nx, ny, m, n, v + 1);\r\n\r\n          if (returnValue) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      visited[x][y] = false;\r\n      if (!returnValue) {\r\n        await sleep((1 / animationSpeed) * 250);\r\n        path[cellId] = null;\r\n        setPath({ ...path });\r\n      }\r\n\r\n      return returnValue;\r\n    }\r\n  };\r\n\r\n  const editState = (e) => {\r\n    var temp = [...obstacles];\r\n    for (var i = 0; i < temp.length; i++) {\r\n      let val = temp[i];\r\n      if (val == parseInt(e.target.getAttribute(\"data-id\"))) {\r\n        temp.splice(i, 1);\r\n        setObstacles(temp);\r\n        return;\r\n      }\r\n    }\r\n    temp.push(parseInt(e.target.getAttribute(\"data-id\")));\r\n    setObstacles(temp);\r\n  };\r\n\r\n  var data = [];\r\n  for (var i = 0; i < cols; i++) {\r\n    data.push([]);\r\n    for (var j = 0; j < rows; j++) {\r\n      data[i].push(rows * i + j);\r\n    }\r\n  }\r\n\r\n  const rowOptions = Array.from({ length: 25 }, (_, index) => index + 1);\r\n  const colOptions = Array.from({ length: 10 }, (_, index) => index + 1);\r\n\r\n  const valuetext = (value) => {\r\n    setAnimationSpeed(value);\r\n    return `${value}x`;\r\n  };\r\n\r\n  const optionStyle = {\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"glass-card\">\r\n        <Grid container sx={{ height: 100 }} spacing={3}>\r\n          <Grid item md={4} xs={12}>\r\n            <Grid container padding={10} spacing={3}>\r\n              <Grid item xs={12}>\r\n                <h2>Depth-First Search</h2>\r\n                <p>{strings.DFS_DESCRIPTION}</p>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    sx={optionStyle}\r\n                    select\r\n                    id=\"row-select\"\r\n                    value={rows}\r\n                    variant=\"outlined\"\r\n                    label=\"Rows\"\r\n                    onChange={handleRowChange}\r\n                  >\r\n                    {rowOptions.map((value) => (\r\n                      <MenuItem value={value}>{value}</MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    sx={optionStyle}\r\n                    select\r\n                    id=\"col-select\"\r\n                    label=\"Columns\"\r\n                    variant=\"outlined\"\r\n                    value={cols}\r\n                    onChange={handleColsChange}\r\n                  >\r\n                    {colOptions.map((value) => (\r\n                      <MenuItem value={value}>{value}</MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Slider\r\n                  aria-label=\"Animation Speed\"\r\n                  defaultValue={1}\r\n                  getAriaValueText={valuetext}\r\n                  step={0.25}\r\n                  marks\r\n                  min={0.25}\r\n                  max={2}\r\n                  valueLabelDisplay=\"on\"\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <Alert\r\n                  sx={{ textAlign: \"center\" }}\r\n                  severity={!running ? \"info\" : \"warning\"}\r\n                >\r\n                  {!running\r\n                    ? \"There are no algorithms running. Click on a square to toggle it as an obstacle.\"\r\n                    : \"An algorithm is currently running.\"}\r\n                </Alert>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Button\r\n                  sx={optionStyle}\r\n                  style={{ height: \"60px\", width: \"100%\" }}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  onClick={dfsSearch}\r\n                  endIcon={<ArrowRightIcon fontSize=\"large\" />}\r\n                  disabled={running}\r\n                >\r\n                  {strings.RUN_BUTTON}\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={8} xs={12}>\r\n            <Grid container padding={10} spacing={3}>\r\n              <Grid item xs={12}>\r\n                <div id=\"grid\" sx={{ minHeight: 400, textAlign: \"center\" }}>\r\n                  {data.map((row, index) => (\r\n                    <div key={index}>\r\n                      {row.map((cellId) => (\r\n                        <div\r\n                          onClick={editState}\r\n                          className={getClassName(cellId)}\r\n                          style={getPathColors(cellId)}\r\n                          key={cellId}\r\n                          data-id={cellId}\r\n                        ></div>\r\n                      ))}\r\n                      <br />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Link to=\"breadth-first\" smooth={true} duration={500}>\r\n              <IconButton aria-label=\"next\" size=\"large\">\r\n                <ArrowDropDownCircleIcon fontSize=\"medium\" />\r\n              </IconButton>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  IconButton,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  MenuItem,\r\n  Grid,\r\n  Slider,\r\n} from \"@material-ui/core\";\r\nimport ArrowDropDownCircleIcon from \"@mui/icons-material/ArrowDropDownCircle\";\r\nimport { Alert } from \"@mui/material\";\r\nimport { Link } from \"react-scroll\";\r\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\";\r\n\r\nconst strings = require(\"./../../static/strings.json\");\r\n\r\nexport default function BreadthFirst() {\r\n  const [cols, setCols] = useState(5);\r\n  const [rows, setRows] = useState(5);\r\n  const [obstacles, setObstacles] = useState([]);\r\n  const [start, setStart] = useState(0);\r\n  const [end, setEnd] = useState(24);\r\n  const [path, setPath] = useState({});\r\n  const [running, setRunning] = useState(false);\r\n  const [animationSpeed, setAnimationSpeed] = useState(1);\r\n  const [showNumbers, setShowNumbers] = useState(true);\r\n\r\n  const handleRowChange = (e) => {\r\n    setRows(e.target.value);\r\n    clearGrid();\r\n  };\r\n  const handleColsChange = (e) => {\r\n    setCols(e.target.value);\r\n    clearGrid();\r\n  };\r\n\r\n  const sleep = (milliseconds) => {\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n  };\r\n\r\n  const clearGrid = () => {\r\n    setObstacles([]);\r\n    setPath({});\r\n  };\r\n\r\n  const getPathColors = (cellId) => {\r\n    if (cellId in path && path[cellId] != null) {\r\n      let color = \"black\";\r\n      if ((15 - Math.min(rows, cols)) * path[cellId] < 128) {\r\n        color = \"white\";\r\n      }\r\n      return {\r\n        backgroundColor: `rgb(0, ${\r\n          (15 - Math.min(rows, cols)) * path[cellId]\r\n        }, ${255 - (15 - Math.min(rows, cols)) * path[cellId]})`,\r\n        color: color,\r\n      };\r\n    }\r\n    return { color: \"black\" };\r\n  };\r\n\r\n  const getClassName = (cellId) => {\r\n    const comp = rows;\r\n    let size = \"gi-xs\";\r\n    if (comp <= 5) {\r\n      size = \"gi-large\";\r\n    } else if (comp <= 10) {\r\n      size = \"gi-medium\";\r\n    } else if (comp <= 15) {\r\n      size = \"gi-small\";\r\n    }\r\n\r\n    return `gridItem ${obstacles.includes(cellId) ? \"obstacle\" : \"\"} ${size}`;\r\n  };\r\n\r\n  const bfsSearch = async () => {\r\n    var m = cols - 1;\r\n    var n = rows - 1;\r\n    setRunning(true);\r\n    var rval = await bfsHelper(0, 0, m, n);\r\n    setRunning(false);\r\n    //   setObstacles([]);\r\n  };\r\n\r\n  const bfsHelper = async (x, y, m, n) => {\r\n    const obst = [...obstacles];\r\n    var dq = [];\r\n    dq.push([x, y, 0]);\r\n    var visited = [];\r\n    for (var i = 0; i < cols; i++) {\r\n      visited.push([]);\r\n      for (var j = 0; j < rows; j++) {\r\n        visited[i].push(false);\r\n      }\r\n    }\r\n    visited[x][y] = true;\r\n\r\n    while (dq.length > 0) {\r\n      const vals = dq.shift();\r\n      if (vals[0] == m && vals[1] == n) {\r\n        return true;\r\n      }\r\n      var cellId = vals[0] * (n + 1) + vals[1];\r\n\r\n      path[cellId] = vals[2];\r\n      setPath({ ...path });\r\n      console.log(path);\r\n\r\n      const nextMoves = [\r\n        [vals[0], vals[1] + 1],\r\n        [vals[0], vals[1] - 1],\r\n        [vals[0] + 1, vals[1]],\r\n        [vals[0] - 1, vals[1]],\r\n      ];\r\n\r\n      for (var move of nextMoves) {\r\n        const nx = move[0];\r\n        const ny = move[1];\r\n        if (\r\n          nx >= 0 &&\r\n          ny >= 0 &&\r\n          nx <= m &&\r\n          ny <= n &&\r\n          !visited[nx][ny] &&\r\n          !obst.includes(cellId)\r\n        ) {\r\n          console.log(nx);\r\n          console.log(ny);\r\n          await sleep((1 / animationSpeed) * 250);\r\n          visited[nx][ny] = true;\r\n          dq.push([nx, ny, vals[2] + 1]);\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const editState = (e) => {\r\n    var temp = [...obstacles];\r\n    console.log(temp);\r\n    console.log(e.target.getAttribute(\"data-id\"));\r\n    for (var i = 0; i < temp.length; i++) {\r\n      let val = temp[i];\r\n      if (val == parseInt(e.target.getAttribute(\"data-id\"))) {\r\n        temp.splice(i, 1);\r\n        setObstacles(temp);\r\n        return;\r\n      }\r\n    }\r\n    temp.push(parseInt(e.target.getAttribute(\"data-id\")));\r\n    setObstacles(temp);\r\n  };\r\n\r\n  var data = [];\r\n  for (var i = 0; i < cols; i++) {\r\n    data.push([]);\r\n    for (var j = 0; j < rows; j++) {\r\n      data[i].push(rows * i + j);\r\n    }\r\n  }\r\n\r\n  const rowOptions = Array.from({ length: 25 }, (_, index) => index + 1);\r\n  const colOptions = Array.from({ length: 10 }, (_, index) => index + 1);\r\n\r\n  const valuetext = (value) => {\r\n    setAnimationSpeed(value);\r\n    return `${value}x`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"glass-card\">\r\n      <Grid container sx={{ height: 100 }} spacing={3}>\r\n        <Grid item md={4} xs={12}>\r\n          <Grid container padding={10} spacing={3}>\r\n            <Grid item xs={12}>\r\n              <h2>Breadth-First Search</h2>\r\n              <p>{strings.BFS_DESCRIPTION}</p>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <TextField\r\n                  select\r\n                  id=\"row-select\"\r\n                  value={rows}\r\n                  variant=\"outlined\"\r\n                  label=\"Rows\"\r\n                  onChange={handleRowChange}\r\n                >\r\n                  {rowOptions.map((value) => (\r\n                    <MenuItem value={value}>{value}</MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <TextField\r\n                  select\r\n                  id=\"col-select\"\r\n                  label=\"Columns\"\r\n                  variant=\"outlined\"\r\n                  value={cols}\r\n                  onChange={handleColsChange}\r\n                >\r\n                  {colOptions.map((value) => (\r\n                    <MenuItem value={value}>{value}</MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Slider\r\n                aria-label=\"Animation Speed\"\r\n                defaultValue={1}\r\n                getAriaValueText={valuetext}\r\n                step={0.25}\r\n                marks\r\n                min={0.25}\r\n                max={2}\r\n                valueLabelDisplay=\"on\"\r\n              />\r\n              {/* <p>Animation Speed</p> */}\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Alert\r\n                sx={{ textAlign: \"center\" }}\r\n                severity={!running ? \"info\" : \"warning\"}\r\n              >\r\n                {!running\r\n                  ? \"There are no algorithms running. Click on a square to toggle it as an obstacle.\"\r\n                  : \"An algorithm is currently running.\"}\r\n              </Alert>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                style={{ height: \"60px\", width: \"100%\" }}\r\n                onClick={bfsSearch}\r\n                endIcon={<ArrowRightIcon fontSize=\"large\" />}\r\n                disabled={running}\r\n              >\r\n                {strings.RUN_BUTTON}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item md={8} xs={12}>\r\n          <Grid container padding={10} spacing={3}>\r\n            <Grid item xs={12}>\r\n              <div\r\n                id=\"grid\"\r\n                sx={{\r\n                  minHeight: 400,\r\n                  textAlign: \"center\",\r\n                  verticalAlign: \"middle\",\r\n                }}\r\n              >\r\n                {data.map((row, index) => (\r\n                  <div>\r\n                    {row.map((cellId) => (\r\n                      <div\r\n                        onClick={editState}\r\n                        className={getClassName(cellId)}\r\n                        style={getPathColors(cellId)}\r\n                        key={cellId}\r\n                        data-id={cellId}\r\n                      ></div>\r\n                    ))}\r\n\r\n                    <br />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Link to=\"dfs-word-search\" smooth={true} duration={500}>\r\n            <IconButton aria-label=\"next\" size=\"medium\">\r\n              <ArrowDropDownCircleIcon fontSize=\"medium\" />\r\n            </IconButton>\r\n          </Link>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  IconButton,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  MenuItem,\r\n  Grid,\r\n  Slider,\r\n} from \"@material-ui/core\";\r\nimport ArrowDropDownCircleIcon from \"@mui/icons-material/ArrowDropDownCircle\";\r\nimport { Alert } from \"@mui/material\";\r\nimport { Link } from \"react-scroll\";\r\nimport \"./../../App.css\";\r\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\";\r\n\r\nconst strings = require(\"./../../static/strings.json\");\r\n\r\nexport default function WordSearchDFS() {\r\n  const [cols, setCols] = useState(5);\r\n  const [rows, setRows] = useState(5);\r\n  const [obstacles, setObstacles] = useState([]);\r\n  const [start, setStart] = useState(0);\r\n  const [end, setEnd] = useState(24);\r\n  const [path, setPath] = useState({});\r\n  const [running, setRunning] = useState(false);\r\n  const [animationSpeed, setAnimationSpeed] = useState(1);\r\n  const [searchString, setSearchString] = useState(\"word\");\r\n  const [gridData, setGridData] = useState([\r\n    [\"a\", \"b\", \"c\", \"d\", \"e\"],\r\n    [\"f\", \"g\", \"h\", \"i\", \"j\"],\r\n    [\"k\", \"l\", \"m\", \"n\", \"o\"],\r\n    [\"p\", \"q\", \"r\", \"s\", \"t\"],\r\n    [\"u\", \"v\", \"w\", \"x\", \"z\"],\r\n  ]);\r\n\r\n  const handleRowChange = (e) => {\r\n    setRows(e.target.value);\r\n    clearGrid();\r\n  };\r\n\r\n  const handleColsChange = (e) => {\r\n    setCols(e.target.value);\r\n    clearGrid();\r\n  };\r\n\r\n  const handleSearchWordChange = (e) => {\r\n    setSearchString(e.target.value);\r\n  };\r\n\r\n  const sleep = (milliseconds) => {\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n  };\r\n\r\n  const clearGrid = () => {\r\n    setObstacles([]);\r\n  };\r\n\r\n  const getClassName = (cellId) => {\r\n    const comp = rows;\r\n    let size = \"gi-xs\";\r\n    if (comp <= 5) {\r\n      size = \"gi-large\";\r\n    } else if (comp <= 10) {\r\n      size = \"gi-medium\";\r\n    } else if (comp <= 15) {\r\n      size = \"gi-small\";\r\n    }\r\n\r\n    return `gridItem ${size}`;\r\n  };\r\n\r\n  const getPathColors = (cellId) => {\r\n    if (cellId in path && path[cellId] != null) {\r\n      let color = \"black\";\r\n      if ((15 - Math.min(rows, cols)) * path[cellId] < 128) {\r\n        color = \"white\";\r\n      }\r\n      return {\r\n        backgroundColor: `rgb(0, ${\r\n          (15 - Math.min(rows, cols)) * path[cellId]\r\n        }, ${255 - (15 - Math.min(rows, cols)) * path[cellId]})`,\r\n        color: color,\r\n      };\r\n    }\r\n    return { color: \"black\" };\r\n  };\r\n\r\n  const dfsSearch = async () => {\r\n    let visited = [];\r\n    for (let i = 0; i < cols; i++) {\r\n      visited.push([]);\r\n      for (let j = 0; j < rows; j++) {\r\n        visited[i].push(false);\r\n      }\r\n    }\r\n    setRunning(true);\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols; j++) {\r\n        if (gridData[i][j] == searchString[0]) {\r\n          let rval = await dfsHelper(visited, i, j, 0);\r\n          if (rval) {\r\n            setRunning(false);\r\n            return rval;\r\n          }\r\n          console.log(rval);\r\n          clearGrid();\r\n        }\r\n      }\r\n    }\r\n\r\n    setRunning(false);\r\n  };\r\n\r\n  const dfsHelper = async (visited, x, y, v) => {\r\n    let m = cols - 1;\r\n    let n = rows - 1;\r\n    if (v == searchString.length - 1) {\r\n      let cellId = x * (n + 1) + y;\r\n      path[cellId] = v;\r\n      setPath({ ...path });\r\n\r\n      return true;\r\n    } else {\r\n      console.log(v);\r\n      const searchLetter = searchString[v + 1];\r\n      let cellId = x * (n + 1) + y;\r\n      visited[x][y] = true;\r\n\r\n      if (document.querySelector(`div[data-id='${cellId}']`) == null) {\r\n        return false;\r\n      }\r\n\r\n      path[cellId] = v;\r\n      setPath({ ...path });\r\n      // console.log(path);\r\n\r\n      let nextMoves = [\r\n        [x - 1, y],\r\n        [x + 1, y],\r\n        [x, y - 1],\r\n        [x, y + 1],\r\n      ];\r\n      let returnValue = false;\r\n\r\n      for (let move of nextMoves) {\r\n        let nx = move[0];\r\n        let ny = move[1];\r\n        if (nx >= visited.length || ny >= visited[0].length) {\r\n          continue;\r\n        }\r\n        console.log(searchLetter);\r\n        if (nx >= 0 && ny >= 0 && nx <= n && nx <= m) {\r\n          console.log(gridData[nx][ny]);\r\n        }\r\n\r\n        if (\r\n          nx >= 0 &&\r\n          ny >= 0 &&\r\n          nx <= n &&\r\n          nx <= m &&\r\n          !visited[nx][ny] &&\r\n          searchLetter == gridData[nx][ny]\r\n        ) {\r\n          await sleep((1 / animationSpeed) * 250);\r\n          returnValue = await dfsHelper(visited, nx, ny, v + 1);\r\n          if (returnValue) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      visited[x][y] = false;\r\n      if (!returnValue) {\r\n        await sleep((1 / animationSpeed) * 250);\r\n        path[cellId] = null;\r\n        setPath({ ...path });\r\n        setTimeout(() => {\r\n          console.log(path);\r\n        }, 10);\r\n        console.log(cellId in path && path[cellId] != null);\r\n      }\r\n      return returnValue;\r\n    }\r\n  };\r\n\r\n  const randomLetter = () => {\r\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\r\n    return alphabet[Math.floor(Math.random() * alphabet.length)];\r\n  };\r\n\r\n  const generateGrid = () => {\r\n    let newGrid = [];\r\n    for (let i = 0; i < cols; i++) {\r\n      newGrid.push([]);\r\n      for (let j = 0; j < rows; j++) {\r\n        newGrid[i].push(randomLetter());\r\n      }\r\n    }\r\n    setGridData(newGrid);\r\n    console.log(newGrid);\r\n  };\r\n\r\n  let data = [];\r\n\r\n  for (let i = 0; i < cols; i++) {\r\n    data.push([]);\r\n    for (let j = 0; j < rows; j++) {\r\n      data[i].push(rows * i + j);\r\n    }\r\n  }\r\n\r\n  const rowOptions = Array.from({ length: 25 }, (_, index) => index + 1);\r\n  const colOptions = Array.from({ length: 10 }, (_, index) => index + 1);\r\n\r\n  const valuetext = (value) => {\r\n    setAnimationSpeed(value);\r\n    return `${value}x`;\r\n  };\r\n\r\n  const optionStyle = {\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"glass-card\">\r\n        <Grid container sx={{ height: 100 }} spacing={3}>\r\n          <Grid item md={4} xs={12}>\r\n            <Grid container padding={10} spacing={3}>\r\n              <Grid item xs={12}>\r\n                <h2>Depth-First Word Search</h2>\r\n                <p className=\"subtext\">{strings.DFS_WS_DESCRIPTION}</p>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    sx={optionStyle}\r\n                    select\r\n                    id=\"row-select\"\r\n                    value={rows}\r\n                    variant=\"outlined\"\r\n                    label=\"Rows\"\r\n                    onChange={handleRowChange}\r\n                  >\r\n                    {rowOptions.map((value) => (\r\n                      <MenuItem value={value}>{value}</MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    sx={optionStyle}\r\n                    select\r\n                    id=\"col-select\"\r\n                    label=\"Columns\"\r\n                    variant=\"outlined\"\r\n                    value={cols}\r\n                    onChange={handleColsChange}\r\n                  >\r\n                    {colOptions.map((value) => (\r\n                      <MenuItem value={value}>{value}</MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Slider\r\n                  aria-label=\"Animation Speed\"\r\n                  defaultValue={1}\r\n                  getAriaValueText={valuetext}\r\n                  step={0.25}\r\n                  marks\r\n                  min={0.25}\r\n                  max={2}\r\n                  valueLabelDisplay=\"on\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <TextField\r\n                  sx={optionStyle}\r\n                  style={{ height: \"100%\", width: \"100%\" }}\r\n                  variant=\"outlined\"\r\n                  label=\"Search String\"\r\n                  onChange={handleSearchWordChange}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Button\r\n                  sx={optionStyle}\r\n                  style={{ height: \"100%\", width: \"100%\" }}\r\n                  color=\"secondary\"\r\n                  variant=\"contained\"\r\n                  onClick={generateGrid}\r\n                  endIcon={<ArrowRightIcon fontSize=\"large\" />}\r\n                >\r\n                  {strings.GRID_RANDOM_BUTTON}\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Alert\r\n                  sx={{ textAlign: \"center\" }}\r\n                  severity={!running ? \"info\" : \"warning\"}\r\n                >\r\n                  {!running\r\n                    ? \"There are no algorithms running. Click on a square to toggle it as an obstacle.\"\r\n                    : \"An algorithm is currently running.\"}\r\n                </Alert>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Button\r\n                  sx={optionStyle}\r\n                  style={{ height: \"60px\", width: \"100%\" }}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  onClick={dfsSearch}\r\n                  endIcon={<ArrowRightIcon fontSize=\"large\" />}\r\n                  disabled={running}\r\n                >\r\n                  {strings.RUN_BUTTON}\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={8} xs={12}>\r\n            <Grid container padding={10} spacing={3}>\r\n              <Grid item xs={12}>\r\n                <div id=\"grid\" sx={{ minHeight: 400, textAlign: \"center\" }}>\r\n                  {data.map((row, index) => (\r\n                    <div>\r\n                      {row.map((cellId, rowIndex) => (\r\n                        <div\r\n                          className={getClassName(cellId)}\r\n                          style={getPathColors(cellId)}\r\n                          key={cellId}\r\n                          data-id={cellId}\r\n                        >\r\n                          {gridData[index][rowIndex]}\r\n                        </div>\r\n                      ))}\r\n                      <br />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Link to=\"bfs-shorted\" smooth={true} duration={500}>\r\n              <IconButton aria-label=\"next\" size=\"large\">\r\n                <ArrowDropDownCircleIcon fontSize=\"medium\" />\r\n              </IconButton>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  IconButton,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  MenuItem,\r\n  Grid,\r\n  Slider,\r\n} from \"@material-ui/core\";\r\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\r\nimport ArrowDropDownCircleIcon from \"@mui/icons-material/ArrowDropDownCircle\";\r\nimport { Alert } from \"@mui/material\";\r\nimport { Link } from \"react-scroll\";\r\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\";\r\n\r\nconst strings = require(\"./../../static/strings.json\");\r\n\r\nexport default function BreadthFirstShortest() {\r\n  const [cols, setCols] = useState(5);\r\n  const [rows, setRows] = useState(5);\r\n  const [obstacles, setObstacles] = useState([]);\r\n  const [start, setStart] = useState(0);\r\n  const [end, setEnd] = useState(24);\r\n  const [path, setPath] = useState({});\r\n  const [running, setRunning] = useState(false);\r\n  const [animationSpeed, setAnimationSpeed] = useState(1);\r\n  const [placingState, setPlacingState] = useState(\"obstacles\");\r\n  const [rog, setRog] = useState(0);\r\n\r\n  const handleRowChange = (e) => {\r\n    setRows(e.target.value);\r\n    clearGrid();\r\n  };\r\n\r\n  const handleColsChange = (e) => {\r\n    setCols(e.target.value);\r\n    clearGrid();\r\n  };\r\n\r\n  const handleRogChange = (e) => {\r\n    console.log(e.target.value);\r\n    setRog(parseInt(e.target.value));\r\n  };\r\n\r\n  const handlePlacingStateChange = (e) => {\r\n    console.log(e.target.value);\r\n    setPlacingState(e.target.value);\r\n  };\r\n\r\n  const sleep = (milliseconds) => {\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n  };\r\n\r\n  const clearGrid = () => {\r\n    setObstacles([]);\r\n    setPath({});\r\n  };\r\n\r\n  const getPathColors = (cellId) => {\r\n    if (cellId in path && path[cellId] != null) {\r\n      let color = \"black\";\r\n      if ((15 - Math.min(rows, cols)) * path[cellId] < 128) {\r\n        color = \"white\";\r\n      }\r\n\r\n      return {\r\n        backgroundColor: `rgb(0, ${\r\n          (15 - Math.min(rows, cols)) * path[cellId]\r\n        }, ${255 - (15 - Math.min(rows, cols)) * path[cellId]})`,\r\n        color: color,\r\n      };\r\n    }\r\n\r\n    if (cellId == start) {\r\n      return {\r\n        backgroundColor: `green`,\r\n      };\r\n    } else if (cellId == end) {\r\n      return {\r\n        backgroundColor: \"red\",\r\n      };\r\n    }\r\n    return { color: \"black\" };\r\n  };\r\n\r\n  const getClassName = (cellId) => {\r\n    const comp = rows;\r\n    let size = \"gi-xs\";\r\n    if (comp <= 5) {\r\n      size = \"gi-large\";\r\n    } else if (comp <= 10) {\r\n      size = \"gi-medium\";\r\n    } else if (comp <= 15) {\r\n      size = \"gi-small\";\r\n    }\r\n\r\n    return `gridItem ${obstacles.includes(cellId) ? \"obstacle\" : \"\"} ${size}`;\r\n  };\r\n\r\n  const bfsSearch = async () => {\r\n    var m = cols - 1;\r\n    var n = rows - 1;\r\n    setRunning(true);\r\n    var rval = await bfsHelper(0, 0, m, n);\r\n    setRunning(false);\r\n    //   setObstacles([]);\r\n  };\r\n\r\n  const bfsHelper = async (x, y, m, n) => {\r\n    const obst = [...obstacles];\r\n    var dq = [];\r\n    dq.push([x, y, 0]);\r\n    var visited = [];\r\n    for (var i = 0; i < cols; i++) {\r\n      visited.push([]);\r\n      for (var j = 0; j < rows; j++) {\r\n        visited[i].push(false);\r\n      }\r\n    }\r\n    visited[x][y] = true;\r\n\r\n    while (dq.length > 0) {\r\n      const vals = dq.shift();\r\n      if (vals[0] == m && vals[1] == n) {\r\n        return true;\r\n      }\r\n      var cellId = vals[0] * (n + 1) + vals[1];\r\n\r\n      path[cellId] = vals[2];\r\n      setPath({ ...path });\r\n      console.log(path);\r\n\r\n      const nextMoves = [\r\n        [vals[0], vals[1] + 1],\r\n        [vals[0], vals[1] - 1],\r\n        [vals[0] + 1, vals[1]],\r\n        [vals[0] - 1, vals[1]],\r\n      ];\r\n\r\n      for (var move of nextMoves) {\r\n        const nx = move[0];\r\n        const ny = move[1];\r\n        if (\r\n          nx >= 0 &&\r\n          ny >= 0 &&\r\n          nx <= m &&\r\n          ny <= n &&\r\n          !visited[nx][ny] &&\r\n          !obst.includes(cellId)\r\n        ) {\r\n          console.log(nx);\r\n          console.log(ny);\r\n          await sleep((1 / animationSpeed) * 250);\r\n          visited[nx][ny] = true;\r\n          dq.push([nx, ny, vals[2] + 1]);\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const editState = (e) => {\r\n    var temp = [...obstacles];\r\n\r\n    const efs = {\r\n      start: setStart,\r\n      end: setEnd,\r\n      obstacles: setObstacles,\r\n    };\r\n\r\n    const editFunction = efs[placingState];\r\n    console.log(editFunction);\r\n    for (var i = 0; i < temp.length; i++) {\r\n      let val = temp[i];\r\n      if (val == parseInt(e.target.getAttribute(\"data-id\"))) {\r\n        temp.splice(i, 1);\r\n        editFunction(temp);\r\n        return;\r\n      }\r\n    }\r\n    temp.push(parseInt(e.target.getAttribute(\"data-id\")));\r\n    editFunction(temp);\r\n  };\r\n\r\n  const rowOptions = Array.from({ length: 25 }, (_, index) => index + 1);\r\n  const colOptions = Array.from({ length: 10 }, (_, index) => index + 1);\r\n\r\n  const valuetext = (value) => {\r\n    setAnimationSpeed(value);\r\n    return `${value}x`;\r\n  };\r\n\r\n  let data = [];\r\n  for (let i = 0; i < cols; i++) {\r\n    data.push([]);\r\n    for (let j = 0; j < rows; j++) {\r\n      data[i].push(rows * i + j);\r\n    }\r\n  }\r\n\r\n  const rng = (max) => {\r\n    return Math.floor(Math.random() * max);\r\n  };\r\n\r\n  const generateRandomObstacles = () => {\r\n    let iter = rog;\r\n    console.log(iter);\r\n    let temp = [];\r\n\r\n    if (rows * cols - obstacles.length < iter) {\r\n      return;\r\n    }\r\n    while (iter > 0) {\r\n      let randomNumber = rng(rows * cols);\r\n      if (!temp.includes(randomNumber)) {\r\n        temp.push(randomNumber);\r\n        --iter;\r\n      }\r\n      console.log(iter);\r\n    }\r\n    setObstacles(temp);\r\n  };\r\n\r\n  return (\r\n    <div className=\"glass-card\">\r\n      <Grid container sx={{ height: 100 }} spacing={3}>\r\n        <Grid item md={4} xs={12}>\r\n          <div style={{ verticalAlign: \"middle\", textAlign: \"center\" }}>\r\n            <Grid container sx={{ height: 100 }} spacing={3}>\r\n              <Grid item xs={12}>\r\n                <h1>Breadth-First Search Shortest Path</h1>\r\n                <p className=\"subtext\">{strings.BFS_DESCRIPTION}</p>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    select\r\n                    id=\"row-select\"\r\n                    value={rows}\r\n                    variant=\"outlined\"\r\n                    label=\"Rows\"\r\n                    onChange={handleRowChange}\r\n                  >\r\n                    {rowOptions.map((value) => (\r\n                      <MenuItem value={value}>{value}</MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    select\r\n                    id=\"col-select\"\r\n                    label=\"Columns\"\r\n                    variant=\"outlined\"\r\n                    value={cols}\r\n                    onChange={handleColsChange}\r\n                  >\r\n                    {colOptions.map((value) => (\r\n                      <MenuItem value={value}>{value}</MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <TextField\r\n                  style={{ height: \"100%\", width: \"100%\" }}\r\n                  variant=\"outlined\"\r\n                  label=\"Generate Obstacles\"\r\n                  onChange={handleRogChange}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Button\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  style={{ height: \"100%\", width: \"100%\" }}\r\n                  onClick={generateRandomObstacles}\r\n                  endIcon={<ArrowRightIcon fontSize=\"large\" />}\r\n                >\r\n                  {\"rng\"}\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Slider\r\n                  aria-label=\"Animation Speed\"\r\n                  defaultValue={1}\r\n                  getAriaValueText={valuetext}\r\n                  step={0.25}\r\n                  marks\r\n                  min={0.25}\r\n                  max={2}\r\n                  valueLabelDisplay=\"on\"\r\n                />\r\n                {/* <p>Animation Speed</p> */}\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Alert\r\n                  sx={{ textAlign: \"center\" }}\r\n                  severity={!running ? \"info\" : \"warning\"}\r\n                >\r\n                  {!running\r\n                    ? \"There are no algorithms running. Click on a square to toggle it as an obstacle.\"\r\n                    : \"An algorithm is currently running.\"}\r\n                </Alert>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Button\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  style={{ height: \"60px\", width: \"100%\" }}\r\n                  onClick={bfsSearch}\r\n                  endIcon={<ArrowRightIcon fontSize=\"large\" />}\r\n                  disabled={running}\r\n                >\r\n                  {strings.RUN_BUTTON}\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </Grid>\r\n        <Grid item md={8} xs={12}>\r\n          <Grid container padding={10} spacing={3}>\r\n            <Grid item xs={12}>\r\n              <ToggleButtonGroup\r\n                value={placingState}\r\n                exclusive\r\n                onChange={handlePlacingStateChange}\r\n                aria-label=\"text alignment\"\r\n              >\r\n                <ToggleButton value=\"start\" aria-label=\"left aligned\">\r\n                  Set Starting Point\r\n                </ToggleButton>\r\n                <ToggleButton value=\"obstacles\" aria-label=\"centered\">\r\n                  Set Obstacles\r\n                </ToggleButton>\r\n                <ToggleButton value=\"end\" aria-label=\"right aligned\">\r\n                  Set Ending Point\r\n                </ToggleButton>\r\n              </ToggleButtonGroup>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <div style={{ verticalAlign: \"middle\", textAlign: \"center\" }}>\r\n                <div id=\"grid\" sx={{ minHeight: 400, textAlign: \"center\" }}>\r\n                  {data.map((row, index) => (\r\n                    <div>\r\n                      {row.map((cellId) => (\r\n                        <div\r\n                          onClick={editState}\r\n                          className={getClassName(cellId)}\r\n                          style={getPathColors(cellId)}\r\n                          key={cellId}\r\n                          data-id={cellId}\r\n                        >\r\n                          {cellId in path && !obstacles.includes(cellId)\r\n                            ? `${path[cellId]}`\r\n                            : \"\"}\r\n                        </div>\r\n                      ))}\r\n\r\n                      <br />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  ListItem,\r\n  Grid,\r\n  List,\r\n  ListItemText,\r\n  Divider,\r\n  Tab,\r\n  Tabs,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Header from \"./components/header.jsx\";\r\nimport DepthFirst from \"./components/dfsAlgs/dfs.jsx\";\r\nimport BreadthFirst from \"./components/bfsAlgs/bfs.jsx\";\r\nimport WordSearchDFS from \"./components/dfsAlgs/wordSearch.jsx\";\r\nimport BreadthFirstShortest from \"./components/bfsAlgs/bfsShortest.jsx\";\r\nimport StickyBox from \"react-sticky-box\";\r\nimport Logs from \"./components/logs.jsx\";\r\n\r\nconst strings = require(\"./static/strings.json\");\r\n\r\nfunction MainWindow(props) {\r\n  const [current, setCurrent] = useState(1);\r\n  const [sideTab, setSideTab] = useState(0);\r\n  const [stateLogs, setStateLogs] = useState([]);\r\n  const sections = 2;\r\n  const classes = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      display: \"none\",\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        display: \"block\",\r\n      },\r\n    },\r\n  }));\r\n\r\n  const ListItemLink = (props) => {\r\n    return <ListItem button component=\"a\" {...props} />;\r\n  };\r\n\r\n  const sectStyle = {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  };\r\n\r\n  const addLog = (newLog) => {\r\n    let logs = [...stateLogs];\r\n    logs.push(newLog);\r\n    console.log(logs);\r\n    setStateLogs(logs);\r\n  };\r\n\r\n  const clearLogs = () => {\r\n    setStateLogs([]);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   window.addEventListener(\"scroll\", handleOnScroll);\r\n  //   return () => {\r\n  //     window.removeEventListener(\"scroll\", handleOnScroll);\r\n  //   };\r\n  // }, []);\r\n\r\n  const handleOnScroll = () => {\r\n    const a = document.body.clientHeight;\r\n    if (sections * Math.round(window.scrollY / a) != current) {\r\n      setCurrent(sections * Math.round(window.scrollY / a));\r\n      console.log(Math.round(window.scrollY / a));\r\n    }\r\n  };\r\n\r\n  const matchParentStyle = {\r\n    height: \"80%\",\r\n    width: \"100%\",\r\n  };\r\n\r\n  const handleSideTabChange = (e, nv) => {\r\n    setSideTab(nv);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <ParticleAnim /> */}\r\n      <Header />\r\n      <div style={{ padding: \"20px\" }}>\r\n        <Grid container sx={{ height: 100 }} spacing={3} margin={20}>\r\n          <Grid item md={0} xs={0}>\r\n            {/* <StickyBox>\r\n              <section style={sectStyle}>\r\n                <div className=\"glass-card\" style={matchParentStyle}>\r\n                  <Tabs\r\n                    value={sideTab}\r\n                    onChange={handleSideTabChange}\r\n                    centered\r\n                    variant=\"fullWidth\"\r\n                  >\r\n                    <Tab\r\n                      label=\"Navigation\"\r\n                      onClick={() => {\r\n                        setSideTab(0);\r\n                      }}\r\n                    />\r\n                    <Tab\r\n                      label=\"Logs\"\r\n                      onClick={() => {\r\n                        setSideTab(1);\r\n                      }}\r\n                    />\r\n                  </Tabs>\r\n                  <div\r\n                    style={{\r\n                      display: sideTab == 0 ? \"block\" : \"none\",\r\n                    }}\r\n                  >\r\n                    <List component=\"nav\" aria-label=\"dfs links\">\r\n                      <ListItem button>\r\n                        <ListItemText primary=\"Depth First Search (DFS)\" />\r\n                      </ListItem>\r\n                      <ListItem button>\r\n                        <ListItemText primary=\"Word Search (DFS Implementation)\" />\r\n                      </ListItem>\r\n                    </List>\r\n                    <Divider />\r\n\r\n                    <List\r\n                      component=\"nav\"\r\n                      aria-label=\"secondary mailbox folders\"\r\n                    >\r\n                      <ListItem button>\r\n                        <ListItemText primary=\"Breadth First Search (BFS)\" />\r\n                      </ListItem>\r\n                    </List>\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      display: sideTab == 0 ? \"none\" : \"block\",\r\n                      padding: \"10px\",\r\n                      overflowX: \"auto\",\r\n                    }}\r\n                  >\r\n                    <Logs logs={stateLogs} />\r\n                  </div>\r\n                </div>\r\n              </section>\r\n            </StickyBox> */}\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <section style={sectStyle} id=\"depth-first\">\r\n              <DepthFirst addLog={addLog} />\r\n            </section>\r\n            <section style={sectStyle} id=\"breadth-first\">\r\n              <BreadthFirst />\r\n            </section>\r\n            <section style={sectStyle} id=\"dfs-word-search\">\r\n              <WordSearchDFS />\r\n            </section>\r\n            <section style={sectStyle} id=\"bfs-shortest-path\">\r\n              <BreadthFirstShortest />\r\n            </section>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default MainWindow;\r\n","import { useState, React } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport MainWindow from \"./MainWindow\";\r\nimport { ThemeProvider, createTheme } from \"@material-ui/core\";\r\nimport \"./index.css\";\r\nimport \"./App.css\";\r\nimport \"./gridItems.css\";\r\n// need to import the vis network css in order to show tooltip\r\n// import \"./network.css\";\r\n\r\nfunction App() {\r\n  const hasWindow = typeof window !== \"undefined\";\r\n  const [dimensions, setDimensions] = useState({\r\n    width: hasWindow ? window.innerWidth : null,\r\n    height: hasWindow ? window.innerHeight : null,\r\n  });\r\n\r\n  const theme = createTheme({\r\n    typography: {\r\n      fontFamily: \"Inter\",\r\n    },\r\n  });\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className=\"App\">\r\n        <MainWindow dims={dimensions} />\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}