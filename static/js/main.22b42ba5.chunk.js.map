{"version":3,"sources":["components/instructions.jsx","components/header.jsx","components/dfsAlgs/dfs.jsx","components/bfsAlgs/bfs.jsx","components/dfsAlgs/wordSearch.jsx","components/bfsAlgs/bfsShortest.jsx","MainWindow.js","App.js","reportWebVitals.js","index.js"],"names":["dividerStyle","margin","Instructions","Fragment","Typography","id","variant","component","sx","mt","Divider","modalStyle","position","top","left","transform","width","height","overflow","bgcolor","borderRadius","boxShadow","p","Header","useRef","useState","open","setOpen","className","ButtonGroup","Button","onClick","color","Modal","onClose","Box","strings","require","DepthFirst","props","cols","setCols","rows","setRows","obstacles","setObstacles","path","setPath","running","setRunning","animationSpeed","setAnimationSpeed","sleep","milliseconds","Promise","resolve","setTimeout","clearGrid","getPathColors","cellId","Math","min","backgroundColor","dfsSearch","a","m","n","visited","i","push","j","dfsHelper","x","y","v","obst","document","querySelector","returnValue","move","nx","ny","length","indexOf","addLog","severity","details","editState","e","temp","parseInt","target","getAttribute","splice","data","rowOptions","Array","from","_","index","colOptions","optionStyle","Grid","container","spacing","item","md","xs","padding","DFS_DESCRIPTION","FormControl","fullWidth","TextField","select","value","label","onChange","map","MenuItem","Slider","defaultValue","getAriaValueText","step","marks","max","valueLabelDisplay","Alert","textAlign","style","endIcon","fontSize","RUN_BUTTON","minHeight","row","includes","to","smooth","duration","IconButton","size","BreadthFirst","bfsSearch","bfsHelper","dq","vals","shift","console","log","nextMoves","BFS_DESCRIPTION","WordSearchDFS","searchString","setSearchString","gridData","setGridData","rval","searchLetter","randomLetter","alphabet","floor","random","DFS_WS_DESCRIPTION","newGrid","GRID_RANDOM_BUTTON","rowIndex","BreadthFirstShortest","start","setStart","end","setEnd","placingState","setPlacingState","rog","setRog","editFunction","verticalAlign","iter","randomNumber","ToggleButtonGroup","exclusive","ToggleButton","MainWindow","stateLogs","setStateLogs","sectStyle","makeStyles","theme","root","flexGrow","menuButton","marginRight","title","display","breakpoints","up","justifyContent","alignItems","newLog","logs","App","hasWindow","window","innerWidth","innerHeight","dimensions","createTheme","typography","fontFamily","ThemeProvider","dims","rootElement","getElementById","ReactDOM","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.22b42ba5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Typography, Divider } from \"@material-ui/core\";\r\nimport \"./../App.css\";\r\nconst dividerStyle = {\r\n  margin: 5,\r\n};\r\nexport default function Instructions() {\r\n  return (\r\n    <React.Fragment>\r\n      <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n        Introduction:\r\n      </Typography>\r\n      <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n        Firstly, I'm glad you decided to give this application a shot. I have\r\n        put a lot of effort into making this application both fun to use, but\r\n        also informative. Below, I have outlined how to use this visualizer to\r\n        maximize your learning experience!\r\n      </Typography>\r\n      <Divider sx={dividerStyle} />\r\n      <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n        Basic Use:\r\n      </Typography>\r\n      <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n        This visualizer currently has 2 algorithms:\r\n        <ul>\r\n          <li>Depth-first Search</li>\r\n          <li>Breadth-first Search</li>\r\n        </ul>\r\n        Each of these algorithms occupies a section of the application and is\r\n        intended to be explored modularly. For each algorithm, a group of\r\n        options is presented to the user, mostly relating to the structure of a\r\n        matrix or graph. These options will allow the user to mess around with\r\n        the algorithm, test edge cases, and understand the core of how the\r\n        algorithm works in a visual context.\r\n      </Typography>\r\n      <Divider sx={dividerStyle} />\r\n      <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n        Matrix-based Algorithms:\r\n      </Typography>\r\n      <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n        Searching in an empty matrix is kind of boring. There will always be a\r\n        way to get to the end, whether it be traversing every element of the\r\n        matrix, or simply going through the perimeter.\r\n        <br />\r\n        As of now, we have the following options for our matrix operations:\r\n        <ul>\r\n          <li>\r\n            <strong>Rows:</strong> This controls the number of rows in the\r\n            matrix (max 10)\r\n          </li>\r\n          <li>\r\n            <strong>Columns:</strong> This controls the number of columns in the\r\n            matrix (max 10)\r\n          </li>\r\n          <li>\r\n            <strong>Animation Speed:</strong> This controls the multiplier, from\r\n            0.25x to 2x of a speed of 4 operations/sec\r\n          </li>\r\n          <li>\r\n            <strong>Show Numbers:</strong> If interested in the paths being\r\n            traversed, a user could enable the number count, where each\r\n            traversed grid item would display its ordering in its path.\r\n          </li>\r\n        </ul>\r\n        In these modules, you are able to visualize a standard search through a\r\n        partially blocked matrix using a specified method. A general rule of\r\n        thumb: depth-first search is good to verify the existance of a path and\r\n        breadth-first search is good to find the shortest path.\r\n        <h3>Specialized Matrix Algorithms</h3>\r\n        In addition to the standard implementations of DFS and BFS, I have also\r\n        added a few specialized implementations of these algorithms. These\r\n        implementations can be seen widely in competitive programming, interview\r\n        problems, and even real-world applications.\r\n        <br />\r\n        The current specializations of DFS and BFS in this application are:\r\n        <ul>\r\n          <li>\r\n            <strong>Word Search:</strong> Searching for an ASCII string within a\r\n            matrix only using standard vertical or horizontal movements\r\n          </li>\r\n          <li>\r\n            <strong>Dijkstra's Algorithm:</strong> Finding the shortest path\r\n            traversal through a graph using BFS\r\n          </li>\r\n        </ul>\r\n      </Typography>\r\n      <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n        <br />\r\n        Don't forget to have fun with it!\r\n        <br />\r\n        Srikant Vasudevan :)\r\n      </Typography>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Button, Modal, Box, ButtonGroup } from \"@material-ui/core\";\r\nimport \"./../App.css\";\r\nimport Instructions from \"./instructions\";\r\n\r\nconst modalStyle = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: \"50vw\",\r\n  height: \"70vh\",\r\n  overflow: \"auto\",\r\n  bgcolor: \"background.paper\",\r\n  borderRadius: 8,\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nfunction Header() {\r\n  const rows = 20;\r\n  const cols = 12;\r\n  const canvasRef = useRef(null);\r\n  var delta = 0;\r\n  const [open, setOpen] = useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const [worms, setWorms] = useState([\r\n    [\r\n      [1, 2],\r\n      [1, 3],\r\n      [2, 3],\r\n      [3, 3],\r\n    ],\r\n  ]);\r\n\r\n  const anim = (time) => {\r\n    if (time - delta > 500) {\r\n      console.log(time);\r\n      delta += 500;\r\n      var tempWorms = [...worms];\r\n      for (var i = 0; i < tempWorms.length; i++) {\r\n        tempWorms[i].shift();\r\n        let worm = tempWorms[i];\r\n        var potentials = [];\r\n        var steps = [\r\n          [-1, 0],\r\n          [1, 0],\r\n          [0, -1],\r\n          [0, 1],\r\n        ];\r\n        for (var step of steps) {\r\n          const nx = worm[worm.length - 1][0] + step[0];\r\n          const ny = worm[worm.length - 1][1] + step[1];\r\n          if (nx > 0 && nx < rows && ny > 0 && nx < cols) {\r\n            potentials.push([nx, ny]);\r\n          }\r\n        }\r\n        tempWorms[i].push(\r\n          potentials[Math.floor(Math.random() * potentials.length)]\r\n        );\r\n      }\r\n      setWorms([...tempWorms]);\r\n      plot();\r\n    }\r\n    requestAnimationFrame(anim);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //     while(canvasRef.current == null) {\r\n  //         setTimeout(() => {}, 200);\r\n  //     }\r\n  //     requestAnimationFrame(anim);\r\n\r\n  // }, []);\r\n\r\n  const plot = () => {\r\n    const canvas = canvasRef.current;\r\n    if (canvas != null && canvas != undefined) {\r\n      const context = canvas.getContext(\"2d\");\r\n      const width = context.canvas.width;\r\n      const height = context.canvas.height;\r\n      const rstep = (width - 20) / 20;\r\n      const cstep = (height - 16) / 12;\r\n\r\n      context.clearRect(0, 0, width, height);\r\n\r\n      for (var worm of worms) {\r\n        console.log(worm);\r\n        if (worm.length > 1) {\r\n          context.beginPath();\r\n          context.moveTo(10 + worm[0][0] * rstep, 8 + worm[0][1] * cstep);\r\n          for (var i = 1; i < worm.length; i++) {\r\n            context.lineTo(10 + worm[i][0] * rstep, 8 + worm[i][1] * cstep);\r\n            context.stroke();\r\n            context.moveTo(10 + worm[i][0] * rstep, 8 + worm[i][1] * cstep);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    // <div>\r\n    // <div style={{height: \"100%\", justifyContent: \"center\", textAlign: \"center\"}} id='header-container'>\r\n    //     <canvas height=\"700px\" width=\"1500px\" ref={canvasRef} style={{backgroundColor: \"white\"}} ></canvas>\r\n    //     <div id=\"overlay\">\r\n    //         yessir bro\r\n    //     </div>\r\n    // </div>\r\n    // </div>\r\n    <React.Fragment>\r\n      <div className=\"outer-header-div\">\r\n        <div className=\"header-div\">\r\n          <h1 className=\"header-text\">Graph Algorithm Visualizer</h1>\r\n          <h3 className=\"secondary-header-text\">Srikant Vasudevan</h3>\r\n          <ButtonGroup variant=\"text\" aria-label=\"text button group\">\r\n            <Button\r\n              onClick={handleOpen}\r\n              sx={{ margin: \"2px\" }}\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n            >\r\n              How to use\r\n            </Button>\r\n            <Button\r\n              sx={{ margin: \"10px\" }}\r\n              color=\"secondary\"\r\n              variant=\"contained\"\r\n            >\r\n              Source Code\r\n            </Button>\r\n          </ButtonGroup>\r\n          <div>\r\n            <Modal\r\n              open={open}\r\n              onClose={handleClose}\r\n              aria-labelledby=\"modal-modal-title\"\r\n              aria-describedby=\"modal-modal-description\"\r\n            >\r\n              <Box sx={modalStyle}>\r\n                {/*\r\n                                    TODO: move the following instructions into the instructions component and use env to store the actual text\r\n                                */}\r\n                <Instructions />\r\n              </Box>\r\n            </Modal>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  IconButton,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  MenuItem,\r\n  Grid,\r\n  Slider,\r\n} from \"@material-ui/core\";\r\nimport ArrowDropDownCircleIcon from \"@mui/icons-material/ArrowDropDownCircle\";\r\nimport { Alert } from \"@mui/material\";\r\nimport { Link } from \"react-scroll\";\r\nimport \"./../../App.css\";\r\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\";\r\n\r\nconst strings = require(\"./../../static/strings.json\");\r\n\r\nexport default function DepthFirst(props) {\r\n  const [cols, setCols] = useState(5);\r\n  const [rows, setRows] = useState(5);\r\n  const [obstacles, setObstacles] = useState([]);\r\n  const [start, setStart] = useState(0);\r\n  const [end, setEnd] = useState(24);\r\n  const [path, setPath] = useState({});\r\n  const [running, setRunning] = useState(false);\r\n  const [animationSpeed, setAnimationSpeed] = useState(1);\r\n\r\n  const handleRowChange = (e) => {\r\n    setRows(e.target.value);\r\n    clearGrid();\r\n  };\r\n  const handleColsChange = (e) => {\r\n    setCols(e.target.value);\r\n    clearGrid();\r\n  };\r\n\r\n  const sleep = (milliseconds) => {\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n  };\r\n\r\n  const clearGrid = () => {\r\n    setObstacles([]);\r\n  };\r\n\r\n  const getPathColors = (cellId) => {\r\n    if (cellId in path && path[cellId] != null) {\r\n      let color = \"black\";\r\n      if ((15 - Math.min(rows, cols)) * path[cellId] < 128) {\r\n        color = \"white\";\r\n      }\r\n      return {\r\n        backgroundColor: `rgb(0, ${\r\n          (15 - Math.min(rows, cols)) * path[cellId]\r\n        }, ${255 - (15 - Math.min(rows, cols)) * path[cellId]})`,\r\n        color: color,\r\n      };\r\n    }\r\n    return { color: \"black\" };\r\n  };\r\n\r\n  const dfsSearch = async () => {\r\n    var m = cols - 1;\r\n    var n = rows - 1;\r\n    var visited = [];\r\n    for (var i = 0; i < cols; i++) {\r\n      visited.push([]);\r\n      for (var j = 0; j < rows; j++) {\r\n        visited[i].push(false);\r\n      }\r\n    }\r\n    setRunning(true);\r\n    var rval = await dfsHelper(visited, 0, 0, m, n, 0);\r\n    setRunning(false);\r\n    setObstacles([]);\r\n  };\r\n\r\n  const dfsHelper = async (visited, x, y, m, n, v) => {\r\n    const obst = [...obstacles];\r\n    var cellId = x * (n + 1) + y;\r\n    if (x == m && y == n) {\r\n      let cellId = x * (n + 1) + y;\r\n      path[cellId] = v;\r\n      setPath({ ...path });\r\n\r\n      return true;\r\n    } else {\r\n      visited[x][y] = true;\r\n      if (document.querySelector(`div[data-id='${cellId}']`) == null) {\r\n        return false;\r\n      }\r\n\r\n      path[cellId] = v;\r\n      setPath({ ...path });\r\n\r\n      setTimeout(() => {}, 1000);\r\n      var nextMoves = [\r\n        [x - 1, y],\r\n        [x + 1, y],\r\n        [x, y - 1],\r\n        [x, y + 1],\r\n      ];\r\n      var returnValue = false;\r\n\r\n      for (var move of nextMoves) {\r\n        var nx = move[0];\r\n        var ny = move[1];\r\n        if (nx >= visited.length || ny >= visited[0].length) {\r\n          continue;\r\n        }\r\n        if (\r\n          nx >= 0 &&\r\n          ny >= 0 &&\r\n          nx <= n &&\r\n          nx <= m &&\r\n          !visited[nx][ny] &&\r\n          obst.indexOf(nx * (n + 1) + ny) == -1\r\n        ) {\r\n          await sleep((1 / animationSpeed) * 250);\r\n          props.addLog({\r\n            severity: returnValue ? \"success\" : \"warning\",\r\n            details: `(${nx}, ${ny})`,\r\n          });\r\n          returnValue = await dfsHelper(visited, nx, ny, m, n, v + 1);\r\n\r\n          if (returnValue) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      visited[x][y] = false;\r\n      if (!returnValue) {\r\n        await sleep((1 / animationSpeed) * 250);\r\n        path[cellId] = null;\r\n        setPath({ ...path });\r\n      }\r\n\r\n      return returnValue;\r\n    }\r\n  };\r\n\r\n  const editState = (e) => {\r\n    var temp = [...obstacles];\r\n    for (var i = 0; i < temp.length; i++) {\r\n      let val = temp[i];\r\n      if (val == parseInt(e.target.getAttribute(\"data-id\"))) {\r\n        temp.splice(i, 1);\r\n        setObstacles(temp);\r\n        return;\r\n      }\r\n    }\r\n    temp.push(parseInt(e.target.getAttribute(\"data-id\")));\r\n    setObstacles(temp);\r\n  };\r\n\r\n  var data = [];\r\n  for (var i = 0; i < cols; i++) {\r\n    data.push([]);\r\n    for (var j = 0; j < rows; j++) {\r\n      data[i].push(rows * i + j);\r\n    }\r\n  }\r\n\r\n  const rowOptions = Array.from({ length: 25 }, (_, index) => index + 1);\r\n  const colOptions = Array.from({ length: 10 }, (_, index) => index + 1);\r\n\r\n  const valuetext = (value) => {\r\n    setAnimationSpeed(value);\r\n    return `${value}x`;\r\n  };\r\n\r\n  const optionStyle = {\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"glass-card\">\r\n        <Grid container sx={{ height: 100 }} spacing={3}>\r\n          <Grid item md={4} xs={12}>\r\n            <Grid container padding={10} spacing={3}>\r\n              <Grid item xs={12}>\r\n                <h2>Depth-First Search</h2>\r\n                <p>{strings.DFS_DESCRIPTION}</p>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    sx={optionStyle}\r\n                    select\r\n                    id=\"row-select\"\r\n                    value={rows}\r\n                    variant=\"outlined\"\r\n                    label=\"Rows\"\r\n                    onChange={handleRowChange}\r\n                  >\r\n                    {rowOptions.map((value) => (\r\n                      <MenuItem value={value}>{value}</MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    sx={optionStyle}\r\n                    select\r\n                    id=\"col-select\"\r\n                    label=\"Columns\"\r\n                    variant=\"outlined\"\r\n                    value={cols}\r\n                    onChange={handleColsChange}\r\n                  >\r\n                    {colOptions.map((value) => (\r\n                      <MenuItem value={value}>{value}</MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Slider\r\n                  aria-label=\"Animation Speed\"\r\n                  defaultValue={1}\r\n                  getAriaValueText={valuetext}\r\n                  step={0.25}\r\n                  marks\r\n                  min={0.25}\r\n                  max={2}\r\n                  valueLabelDisplay=\"on\"\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <Alert\r\n                  sx={{ textAlign: \"center\" }}\r\n                  severity={!running ? \"info\" : \"warning\"}\r\n                >\r\n                  {!running\r\n                    ? \"There are no algorithms running. Click on a square to toggle it as an obstacle.\"\r\n                    : \"An algorithm is currently running.\"}\r\n                </Alert>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Button\r\n                  sx={optionStyle}\r\n                  style={{ height: \"60px\", width: \"100%\" }}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  onClick={dfsSearch}\r\n                  endIcon={<ArrowRightIcon fontSize=\"large\" />}\r\n                >\r\n                  {strings.RUN_BUTTON}\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={8} xs={12}>\r\n            <Grid container padding={10} spacing={3}>\r\n              <Grid item xs={12}>\r\n                <div id=\"grid\" sx={{ minHeight: 400, textAlign: \"center\" }}>\r\n                  {data.map((row, index) => (\r\n                    <div key={index}>\r\n                      {row.map((cellId) => (\r\n                        <div\r\n                          onClick={editState}\r\n                          className={`gridItem ${\r\n                            obstacles.includes(cellId) ? \"obstacle\" : \"\"\r\n                          }`}\r\n                          style={getPathColors(cellId)}\r\n                          key={cellId}\r\n                          data-id={cellId}\r\n                        ></div>\r\n                      ))}\r\n                      <br />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Link to=\"breadth-first\" smooth={true} duration={500}>\r\n              <IconButton aria-label=\"delete\" size=\"large\">\r\n                <ArrowDropDownCircleIcon fontSize=\"large\" />\r\n              </IconButton>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  IconButton,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  MenuItem,\r\n  Grid,\r\n  Slider,\r\n} from \"@material-ui/core\";\r\nimport ArrowDropDownCircleIcon from \"@mui/icons-material/ArrowDropDownCircle\";\r\nimport { Alert } from \"@mui/material\";\r\nimport { Link } from \"react-scroll\";\r\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\";\r\n\r\nconst strings = require(\"./../../static/strings.json\");\r\n\r\nexport default function BreadthFirst() {\r\n  const [cols, setCols] = useState(5);\r\n  const [rows, setRows] = useState(5);\r\n  const [obstacles, setObstacles] = useState([]);\r\n  const [start, setStart] = useState(0);\r\n  const [end, setEnd] = useState(24);\r\n  const [path, setPath] = useState({});\r\n  const [running, setRunning] = useState(false);\r\n  const [animationSpeed, setAnimationSpeed] = useState(1);\r\n  const [showNumbers, setShowNumbers] = useState(true);\r\n\r\n  const handleRowChange = (e) => {\r\n    setRows(e.target.value);\r\n    clearGrid();\r\n  };\r\n  const handleColsChange = (e) => {\r\n    setCols(e.target.value);\r\n    clearGrid();\r\n  };\r\n\r\n  const sleep = (milliseconds) => {\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n  };\r\n\r\n  const clearGrid = () => {\r\n    setObstacles([]);\r\n    setPath({});\r\n  };\r\n\r\n  const bfsSearch = async () => {\r\n    var m = cols - 1;\r\n    var n = rows - 1;\r\n    setRunning(true);\r\n    var rval = await bfsHelper(0, 0, m, n);\r\n    setRunning(false);\r\n    //   setObstacles([]);\r\n  };\r\n\r\n  const bfsHelper = async (x, y, m, n) => {\r\n    const obst = [...obstacles];\r\n    var dq = [];\r\n    dq.push([x, y, 0]);\r\n    var visited = [];\r\n    for (var i = 0; i < cols; i++) {\r\n      visited.push([]);\r\n      for (var j = 0; j < rows; j++) {\r\n        visited[i].push(false);\r\n      }\r\n    }\r\n    visited[x][y] = true;\r\n\r\n    while (dq.length > 0) {\r\n      const vals = dq.shift();\r\n      if (vals[0] == m && vals[1] == n) {\r\n        return true;\r\n      }\r\n      var cellId = vals[0] * (n + 1) + vals[1];\r\n\r\n      path[cellId] = vals[2];\r\n      setPath({ ...path });\r\n      console.log(path);\r\n\r\n      const nextMoves = [\r\n        [vals[0], vals[1] + 1],\r\n        [vals[0], vals[1] - 1],\r\n        [vals[0] + 1, vals[1]],\r\n        [vals[0] - 1, vals[1]],\r\n      ];\r\n\r\n      for (var move of nextMoves) {\r\n        const nx = move[0];\r\n        const ny = move[1];\r\n        if (\r\n          nx >= 0 &&\r\n          ny >= 0 &&\r\n          nx <= m &&\r\n          ny <= n &&\r\n          !visited[nx][ny] &&\r\n          !obst.includes(cellId)\r\n        ) {\r\n          console.log(nx);\r\n          console.log(ny);\r\n          await sleep((1 / animationSpeed) * 250);\r\n          visited[nx][ny] = true;\r\n          dq.push([nx, ny, vals[2] + 1]);\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const editState = (e) => {\r\n    var temp = [...obstacles];\r\n    console.log(temp);\r\n    console.log(e.target.getAttribute(\"data-id\"));\r\n    for (var i = 0; i < temp.length; i++) {\r\n      let val = temp[i];\r\n      if (val == parseInt(e.target.getAttribute(\"data-id\"))) {\r\n        temp.splice(i, 1);\r\n        setObstacles(temp);\r\n        return;\r\n      }\r\n    }\r\n    temp.push(parseInt(e.target.getAttribute(\"data-id\")));\r\n    setObstacles(temp);\r\n  };\r\n\r\n  var data = [];\r\n  for (var i = 0; i < cols; i++) {\r\n    data.push([]);\r\n    for (var j = 0; j < rows; j++) {\r\n      data[i].push(rows * i + j);\r\n    }\r\n  }\r\n\r\n  const rowOptions = Array.from({ length: 25 }, (_, index) => index + 1);\r\n  const colOptions = Array.from({ length: 10 }, (_, index) => index + 1);\r\n\r\n  const valuetext = (value) => {\r\n    setAnimationSpeed(value);\r\n    return `${value}x`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"glass-card\">\r\n      <Grid container sx={{ height: 100 }} spacing={3}>\r\n        <Grid item md={4} xs={12}>\r\n          <Grid container padding={10} spacing={3}>\r\n            <Grid item xs={12}>\r\n              <h2>Breadth-First Search</h2>\r\n              <p>{strings.BFS_DESCRIPTION}</p>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <TextField\r\n                  select\r\n                  id=\"row-select\"\r\n                  value={rows}\r\n                  variant=\"outlined\"\r\n                  label=\"Rows\"\r\n                  onChange={handleRowChange}\r\n                >\r\n                  {rowOptions.map((value) => (\r\n                    <MenuItem value={value}>{value}</MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <TextField\r\n                  select\r\n                  id=\"col-select\"\r\n                  label=\"Columns\"\r\n                  variant=\"outlined\"\r\n                  value={cols}\r\n                  onChange={handleColsChange}\r\n                >\r\n                  {colOptions.map((value) => (\r\n                    <MenuItem value={value}>{value}</MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Slider\r\n                aria-label=\"Animation Speed\"\r\n                defaultValue={1}\r\n                getAriaValueText={valuetext}\r\n                step={0.25}\r\n                marks\r\n                min={0.25}\r\n                max={2}\r\n                valueLabelDisplay=\"on\"\r\n              />\r\n              {/* <p>Animation Speed</p> */}\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Alert\r\n                sx={{ textAlign: \"center\" }}\r\n                severity={!running ? \"info\" : \"warning\"}\r\n              >\r\n                {!running\r\n                  ? \"There are no algorithms running. Click on a square to toggle it as an obstacle.\"\r\n                  : \"An algorithm is currently running.\"}\r\n              </Alert>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                style={{ height: \"100%\", width: \"100%\" }}\r\n                onClick={bfsSearch}\r\n                endIcon={<ArrowRightIcon fontSize=\"large\" />}\r\n              >\r\n                {strings.RUN_BUTTON}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item md={8} xs={12}>\r\n          <Grid container padding={10} spacing={3}>\r\n            <Grid item xs={12}>\r\n              <div id=\"grid\" sx={{ minHeight: 400, textAlign: \"center\" }}>\r\n                {data.map((row, index) => (\r\n                  <div>\r\n                    {row.map((cellId) => (\r\n                      <div\r\n                        onClick={editState}\r\n                        className={`gridItem ${\r\n                          obstacles.includes(cellId) ? \"obstacle\" : \"\"\r\n                        }`}\r\n                        style={{\r\n                          backgroundColor:\r\n                            cellId in path\r\n                              ? `rgb(0, ${\r\n                                  (30 - Math.min(rows, cols)) * path[cellId]\r\n                                }, ${\r\n                                  255 -\r\n                                  (30 - Math.min(rows, cols)) * path[cellId]\r\n                                })`\r\n                              : {},\r\n                        }}\r\n                        key={cellId}\r\n                        data-id={cellId}\r\n                      >\r\n                        {/* {showNumbers && cellId in path ? `${path[cellId]}` : \"\"} */}\r\n                      </div>\r\n                    ))}\r\n\r\n                    <br />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Link to=\"dfs-word-search\" smooth={true} duration={500}>\r\n                <IconButton aria-label=\"delete\" size=\"small\">\r\n                  <ArrowDropDownCircleIcon fontSize=\"small\" />\r\n                </IconButton>\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  IconButton,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  MenuItem,\r\n  Grid,\r\n  Slider,\r\n} from \"@material-ui/core\";\r\nimport ArrowDropDownCircleIcon from \"@mui/icons-material/ArrowDropDownCircle\";\r\nimport { Alert } from \"@mui/material\";\r\nimport { Link } from \"react-scroll\";\r\nimport \"./../../App.css\";\r\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\";\r\n\r\nconst strings = require(\"./../../static/strings.json\");\r\n\r\nexport default function WordSearchDFS() {\r\n  const [cols, setCols] = useState(5);\r\n  const [rows, setRows] = useState(5);\r\n  const [obstacles, setObstacles] = useState([]);\r\n  const [start, setStart] = useState(0);\r\n  const [end, setEnd] = useState(24);\r\n  const [path, setPath] = useState({});\r\n  const [running, setRunning] = useState(false);\r\n  const [animationSpeed, setAnimationSpeed] = useState(1);\r\n  const [searchString, setSearchString] = useState(\"word\");\r\n  const [gridData, setGridData] = useState([\r\n    [\"a\", \"b\", \"c\", \"d\", \"e\"],\r\n    [\"f\", \"g\", \"h\", \"i\", \"j\"],\r\n    [\"k\", \"l\", \"m\", \"n\", \"o\"],\r\n    [\"p\", \"q\", \"r\", \"s\", \"t\"],\r\n    [\"u\", \"v\", \"w\", \"x\", \"z\"],\r\n  ]);\r\n\r\n  const handleRowChange = (e) => {\r\n    setRows(e.target.value);\r\n    clearGrid();\r\n  };\r\n\r\n  const handleColsChange = (e) => {\r\n    setCols(e.target.value);\r\n    clearGrid();\r\n  };\r\n\r\n  const handleSearchWordChange = (e) => {\r\n    setSearchString(e.target.value);\r\n  };\r\n\r\n  const sleep = (milliseconds) => {\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n  };\r\n\r\n  const clearGrid = () => {\r\n    setObstacles([]);\r\n  };\r\n\r\n  const getPathColors = (cellId) => {\r\n    if (cellId in path && path[cellId] != null) {\r\n      let color = \"black\";\r\n      if ((15 - Math.min(rows, cols)) * path[cellId] < 128) {\r\n        color = \"white\";\r\n      }\r\n      return {\r\n        backgroundColor: `rgb(0, ${\r\n          (15 - Math.min(rows, cols)) * path[cellId]\r\n        }, ${255 - (15 - Math.min(rows, cols)) * path[cellId]})`,\r\n        color: color,\r\n      };\r\n    }\r\n    return { color: \"black\" };\r\n  };\r\n\r\n  const dfsSearch = async () => {\r\n    let visited = [];\r\n    for (let i = 0; i < cols; i++) {\r\n      visited.push([]);\r\n      for (let j = 0; j < rows; j++) {\r\n        visited[i].push(false);\r\n      }\r\n    }\r\n    setRunning(true);\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols; j++) {\r\n        if (gridData[i][j] == searchString[0]) {\r\n          let rval = await dfsHelper(visited, i, j, 0);\r\n          if (rval) {\r\n            setRunning(false);\r\n            return rval;\r\n          }\r\n          console.log(rval);\r\n          clearGrid();\r\n        }\r\n      }\r\n    }\r\n\r\n    setRunning(false);\r\n  };\r\n\r\n  const dfsHelper = async (visited, x, y, v) => {\r\n    let m = cols - 1;\r\n    let n = rows - 1;\r\n    if (v == searchString.length - 1) {\r\n      let cellId = x * (n + 1) + y;\r\n      path[cellId] = v;\r\n      setPath({ ...path });\r\n\r\n      return true;\r\n    } else {\r\n      console.log(v);\r\n      const searchLetter = searchString[v + 1];\r\n      let cellId = x * (n + 1) + y;\r\n      visited[x][y] = true;\r\n\r\n      if (document.querySelector(`div[data-id='${cellId}']`) == null) {\r\n        return false;\r\n      }\r\n\r\n      path[cellId] = v;\r\n      setPath({ ...path });\r\n      // console.log(path);\r\n\r\n      let nextMoves = [\r\n        [x - 1, y],\r\n        [x + 1, y],\r\n        [x, y - 1],\r\n        [x, y + 1],\r\n      ];\r\n      let returnValue = false;\r\n\r\n      for (let move of nextMoves) {\r\n        let nx = move[0];\r\n        let ny = move[1];\r\n        if (nx >= visited.length || ny >= visited[0].length) {\r\n          continue;\r\n        }\r\n        console.log(searchLetter);\r\n        if (nx >= 0 && ny >= 0 && nx <= n && nx <= m) {\r\n          console.log(gridData[nx][ny]);\r\n        }\r\n\r\n        if (\r\n          nx >= 0 &&\r\n          ny >= 0 &&\r\n          nx <= n &&\r\n          nx <= m &&\r\n          !visited[nx][ny] &&\r\n          searchLetter == gridData[nx][ny]\r\n        ) {\r\n          await sleep((1 / animationSpeed) * 250);\r\n          returnValue = await dfsHelper(visited, nx, ny, v + 1);\r\n          if (returnValue) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      visited[x][y] = false;\r\n      if (!returnValue) {\r\n        await sleep((1 / animationSpeed) * 250);\r\n        path[cellId] = null;\r\n        setPath({ ...path });\r\n        setTimeout(() => {\r\n          console.log(path);\r\n        }, 10);\r\n        console.log(cellId in path && path[cellId] != null);\r\n      }\r\n      return returnValue;\r\n    }\r\n  };\r\n\r\n  const randomLetter = () => {\r\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\r\n    return alphabet[Math.floor(Math.random() * alphabet.length)];\r\n  };\r\n\r\n  const generateGrid = () => {\r\n    let newGrid = [];\r\n    for (let i = 0; i < cols; i++) {\r\n      newGrid.push([]);\r\n      for (let j = 0; j < rows; j++) {\r\n        newGrid[i].push(randomLetter());\r\n      }\r\n    }\r\n    setGridData(newGrid);\r\n    console.log(newGrid);\r\n  };\r\n\r\n  let data = [];\r\n\r\n  for (let i = 0; i < cols; i++) {\r\n    data.push([]);\r\n    for (let j = 0; j < rows; j++) {\r\n      data[i].push(rows * i + j);\r\n    }\r\n  }\r\n\r\n  const rowOptions = Array.from({ length: 25 }, (_, index) => index + 1);\r\n  const colOptions = Array.from({ length: 10 }, (_, index) => index + 1);\r\n\r\n  const valuetext = (value) => {\r\n    setAnimationSpeed(value);\r\n    return `${value}x`;\r\n  };\r\n\r\n  const optionStyle = {\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"glass-card\">\r\n        <Grid container sx={{ height: 100 }} spacing={3}>\r\n          <Grid item md={4} xs={12}>\r\n            <Grid container padding={10} spacing={3}>\r\n              <Grid item xs={12}>\r\n                <h2>Depth-First Word Search</h2>\r\n                <p className=\"subtext\">{strings.DFS_WS_DESCRIPTION}</p>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    sx={optionStyle}\r\n                    select\r\n                    id=\"row-select\"\r\n                    value={rows}\r\n                    variant=\"outlined\"\r\n                    label=\"Rows\"\r\n                    onChange={handleRowChange}\r\n                  >\r\n                    {rowOptions.map((value) => (\r\n                      <MenuItem value={value}>{value}</MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    sx={optionStyle}\r\n                    select\r\n                    id=\"col-select\"\r\n                    label=\"Columns\"\r\n                    variant=\"outlined\"\r\n                    value={cols}\r\n                    onChange={handleColsChange}\r\n                  >\r\n                    {colOptions.map((value) => (\r\n                      <MenuItem value={value}>{value}</MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Slider\r\n                  aria-label=\"Animation Speed\"\r\n                  defaultValue={1}\r\n                  getAriaValueText={valuetext}\r\n                  step={0.25}\r\n                  marks\r\n                  min={0.25}\r\n                  max={2}\r\n                  valueLabelDisplay=\"on\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <TextField\r\n                  sx={optionStyle}\r\n                  style={{ height: \"100%\", width: \"100%\" }}\r\n                  variant=\"outlined\"\r\n                  label=\"Search String\"\r\n                  onChange={handleSearchWordChange}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Button\r\n                  sx={optionStyle}\r\n                  style={{ height: \"100%\", width: \"100%\" }}\r\n                  color=\"secondary\"\r\n                  variant=\"contained\"\r\n                  onClick={generateGrid}\r\n                  endIcon={<ArrowRightIcon fontSize=\"large\" />}\r\n                >\r\n                  {strings.GRID_RANDOM_BUTTON}\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Alert\r\n                  sx={{ textAlign: \"center\" }}\r\n                  severity={!running ? \"info\" : \"warning\"}\r\n                >\r\n                  {!running\r\n                    ? \"There are no algorithms running. Click on a square to toggle it as an obstacle.\"\r\n                    : \"An algorithm is currently running.\"}\r\n                </Alert>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Button\r\n                  sx={optionStyle}\r\n                  style={{ height: \"60px\", width: \"100%\" }}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  onClick={dfsSearch}\r\n                  endIcon={<ArrowRightIcon fontSize=\"large\" />}\r\n                >\r\n                  {strings.RUN_BUTTON}\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={8} xs={12}>\r\n            <Grid container padding={10} spacing={3}>\r\n              <Grid item xs={12}>\r\n                <div id=\"grid\" sx={{ minHeight: 400, textAlign: \"center\" }}>\r\n                  {data.map((row, index) => (\r\n                    <div>\r\n                      {row.map((cellId, rowIndex) => (\r\n                        <div\r\n                          className={`gridItem`}\r\n                          style={getPathColors(cellId)}\r\n                          key={cellId}\r\n                          data-id={cellId}\r\n                        >\r\n                          {gridData[index][rowIndex]}\r\n                        </div>\r\n                      ))}\r\n                      <br />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Link to=\"breadth-first\" smooth={true} duration={500}>\r\n                  <IconButton aria-label=\"delete\" size=\"small\">\r\n                    <ArrowDropDownCircleIcon fontSize=\"small\" />\r\n                  </IconButton>\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  IconButton,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  MenuItem,\r\n  Grid,\r\n  Slider,\r\n} from \"@material-ui/core\";\r\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\r\nimport ArrowDropDownCircleIcon from \"@mui/icons-material/ArrowDropDownCircle\";\r\nimport { Alert } from \"@mui/material\";\r\nimport { Link } from \"react-scroll\";\r\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\";\r\n\r\nconst strings = require(\"./../../static/strings.json\");\r\n\r\nexport default function BreadthFirstShortest() {\r\n  const [cols, setCols] = useState(5);\r\n  const [rows, setRows] = useState(5);\r\n  const [obstacles, setObstacles] = useState([]);\r\n  const [start, setStart] = useState(0);\r\n  const [end, setEnd] = useState(24);\r\n  const [path, setPath] = useState({});\r\n  const [running, setRunning] = useState(false);\r\n  const [animationSpeed, setAnimationSpeed] = useState(1);\r\n  const [placingState, setPlacingState] = useState(\"obstacles\");\r\n  const [rog, setRog] = useState(0);\r\n\r\n  const handleRowChange = (e) => {\r\n    setRows(e.target.value);\r\n    clearGrid();\r\n  };\r\n\r\n  const handleColsChange = (e) => {\r\n    setCols(e.target.value);\r\n    clearGrid();\r\n  };\r\n\r\n  const handleRogChange = (e) => {\r\n    console.log(e.target.value);\r\n    setRog(parseInt(e.target.value));\r\n  };\r\n\r\n  const handlePlacingStateChange = (e) => {\r\n    console.log(e.target.value);\r\n    setPlacingState(e.target.value);\r\n  };\r\n\r\n  const sleep = (milliseconds) => {\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n  };\r\n\r\n  const clearGrid = () => {\r\n    setObstacles([]);\r\n    setPath({});\r\n  };\r\n\r\n  const getPathColors = (cellId) => {\r\n    if (cellId in path && path[cellId] != null) {\r\n      let color = \"black\";\r\n      if ((15 - Math.min(rows, cols)) * path[cellId] < 128) {\r\n        color = \"white\";\r\n      }\r\n\r\n      return {\r\n        backgroundColor: `rgb(0, ${\r\n          (15 - Math.min(rows, cols)) * path[cellId]\r\n        }, ${255 - (15 - Math.min(rows, cols)) * path[cellId]})`,\r\n        color: color,\r\n      };\r\n    }\r\n\r\n    if (cellId == start) {\r\n      return {\r\n        backgroundColor: `green`,\r\n      };\r\n    } else if (cellId == end) {\r\n      return {\r\n        backgroundColor: \"red\",\r\n      };\r\n    }\r\n    return { color: \"black\" };\r\n  };\r\n\r\n  const bfsSearch = async () => {\r\n    var m = cols - 1;\r\n    var n = rows - 1;\r\n    setRunning(true);\r\n    var rval = await bfsHelper(0, 0, m, n);\r\n    setRunning(false);\r\n    //   setObstacles([]);\r\n  };\r\n\r\n  const bfsHelper = async (x, y, m, n) => {\r\n    const obst = [...obstacles];\r\n    var dq = [];\r\n    dq.push([x, y, 0]);\r\n    var visited = [];\r\n    for (var i = 0; i < cols; i++) {\r\n      visited.push([]);\r\n      for (var j = 0; j < rows; j++) {\r\n        visited[i].push(false);\r\n      }\r\n    }\r\n    visited[x][y] = true;\r\n\r\n    while (dq.length > 0) {\r\n      const vals = dq.shift();\r\n      if (vals[0] == m && vals[1] == n) {\r\n        return true;\r\n      }\r\n      var cellId = vals[0] * (n + 1) + vals[1];\r\n\r\n      path[cellId] = vals[2];\r\n      setPath({ ...path });\r\n      console.log(path);\r\n\r\n      const nextMoves = [\r\n        [vals[0], vals[1] + 1],\r\n        [vals[0], vals[1] - 1],\r\n        [vals[0] + 1, vals[1]],\r\n        [vals[0] - 1, vals[1]],\r\n      ];\r\n\r\n      for (var move of nextMoves) {\r\n        const nx = move[0];\r\n        const ny = move[1];\r\n        if (\r\n          nx >= 0 &&\r\n          ny >= 0 &&\r\n          nx <= m &&\r\n          ny <= n &&\r\n          !visited[nx][ny] &&\r\n          !obst.includes(cellId)\r\n        ) {\r\n          console.log(nx);\r\n          console.log(ny);\r\n          await sleep((1 / animationSpeed) * 250);\r\n          visited[nx][ny] = true;\r\n          dq.push([nx, ny, vals[2] + 1]);\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const editState = (e) => {\r\n    var temp = [...obstacles];\r\n\r\n    const efs = {\r\n      start: setStart,\r\n      end: setEnd,\r\n      obstacles: setObstacles,\r\n    };\r\n\r\n    const editFunction = efs[placingState];\r\n    console.log(editFunction);\r\n    for (var i = 0; i < temp.length; i++) {\r\n      let val = temp[i];\r\n      if (val == parseInt(e.target.getAttribute(\"data-id\"))) {\r\n        temp.splice(i, 1);\r\n        editFunction(temp);\r\n        return;\r\n      }\r\n    }\r\n    temp.push(parseInt(e.target.getAttribute(\"data-id\")));\r\n    editFunction(temp);\r\n  };\r\n\r\n  const rowOptions = Array.from({ length: 25 }, (_, index) => index + 1);\r\n  const colOptions = Array.from({ length: 10 }, (_, index) => index + 1);\r\n\r\n  const valuetext = (value) => {\r\n    setAnimationSpeed(value);\r\n    return `${value}x`;\r\n  };\r\n\r\n  let data = [];\r\n  for (let i = 0; i < cols; i++) {\r\n    data.push([]);\r\n    for (let j = 0; j < rows; j++) {\r\n      data[i].push(rows * i + j);\r\n    }\r\n  }\r\n\r\n  const rng = (max) => {\r\n    return Math.floor(Math.random() * max);\r\n  };\r\n\r\n  const generateRandomObstacles = () => {\r\n    let iter = rog;\r\n    console.log(iter);\r\n    let temp = [];\r\n\r\n    if (rows * cols - obstacles.length < iter) {\r\n      return;\r\n    }\r\n    while (iter > 0) {\r\n      let randomNumber = rng(rows * cols);\r\n      if (!temp.includes(randomNumber)) {\r\n        temp.push(randomNumber);\r\n        --iter;\r\n      }\r\n      console.log(iter);\r\n    }\r\n    setObstacles(temp);\r\n  };\r\n\r\n  return (\r\n    <div className=\"glass-card\">\r\n      <Grid container sx={{ height: 100 }} spacing={3}>\r\n        <Grid item md={4} xs={12}>\r\n          <div style={{ verticalAlign: \"middle\", textAlign: \"center\" }}>\r\n            <Grid container sx={{ height: 100 }} spacing={3}>\r\n              <Grid item xs={12}>\r\n                <h1>Breadth-First Search Shortest Path</h1>\r\n                <p className=\"subtext\">{strings.BFS_DESCRIPTION}</p>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    select\r\n                    id=\"row-select\"\r\n                    value={rows}\r\n                    variant=\"outlined\"\r\n                    label=\"Rows\"\r\n                    onChange={handleRowChange}\r\n                  >\r\n                    {rowOptions.map((value) => (\r\n                      <MenuItem value={value}>{value}</MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    select\r\n                    id=\"col-select\"\r\n                    label=\"Columns\"\r\n                    variant=\"outlined\"\r\n                    value={cols}\r\n                    onChange={handleColsChange}\r\n                  >\r\n                    {colOptions.map((value) => (\r\n                      <MenuItem value={value}>{value}</MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <TextField\r\n                  style={{ height: \"100%\", width: \"100%\" }}\r\n                  variant=\"outlined\"\r\n                  label=\"Generate Obstacles\"\r\n                  onChange={handleRogChange}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Button\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  style={{ height: \"100%\", width: \"100%\" }}\r\n                  onClick={generateRandomObstacles}\r\n                  endIcon={<ArrowRightIcon fontSize=\"large\" />}\r\n                >\r\n                  {\"rng\"}\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Slider\r\n                  aria-label=\"Animation Speed\"\r\n                  defaultValue={1}\r\n                  getAriaValueText={valuetext}\r\n                  step={0.25}\r\n                  marks\r\n                  min={0.25}\r\n                  max={2}\r\n                  valueLabelDisplay=\"on\"\r\n                />\r\n                {/* <p>Animation Speed</p> */}\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Alert\r\n                  sx={{ textAlign: \"center\" }}\r\n                  severity={!running ? \"info\" : \"warning\"}\r\n                >\r\n                  {!running\r\n                    ? \"There are no algorithms running. Click on a square to toggle it as an obstacle.\"\r\n                    : \"An algorithm is currently running.\"}\r\n                </Alert>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Button\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  style={{ height: \"60px\", width: \"100%\" }}\r\n                  onClick={bfsSearch}\r\n                  endIcon={<ArrowRightIcon fontSize=\"large\" />}\r\n                >\r\n                  {strings.RUN_BUTTON}\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </Grid>\r\n        <Grid item md={8} xs={12}>\r\n          <Grid container padding={10} spacing={3}>\r\n            <Grid item xs={12}>\r\n              <ToggleButtonGroup\r\n                value={placingState}\r\n                exclusive\r\n                onChange={handlePlacingStateChange}\r\n                aria-label=\"text alignment\"\r\n              >\r\n                <ToggleButton value=\"start\" aria-label=\"left aligned\">\r\n                  Set Starting Point\r\n                </ToggleButton>\r\n                <ToggleButton value=\"obstacles\" aria-label=\"centered\">\r\n                  Set Obstacles\r\n                </ToggleButton>\r\n                <ToggleButton value=\"end\" aria-label=\"right aligned\">\r\n                  Set Ending Point\r\n                </ToggleButton>\r\n              </ToggleButtonGroup>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <div style={{ verticalAlign: \"middle\", textAlign: \"center\" }}>\r\n                <div id=\"grid\" sx={{ minHeight: 400, textAlign: \"center\" }}>\r\n                  {data.map((row, index) => (\r\n                    <div>\r\n                      {row.map((cellId) => (\r\n                        <div\r\n                          onClick={editState}\r\n                          className={`gridItem ${\r\n                            obstacles.includes(cellId) ? \"obstacle\" : \"\"\r\n                          }`}\r\n                          style={getPathColors(cellId)}\r\n                          key={cellId}\r\n                          data-id={cellId}\r\n                        >\r\n                          {cellId in path && !obstacles.includes(cellId)\r\n                            ? `${path[cellId]}`\r\n                            : \"\"}\r\n                        </div>\r\n                      ))}\r\n\r\n                      <br />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Link to=\"dfs-word-search\" smooth={true} duration={500}>\r\n                <IconButton aria-label=\"delete\" size=\"small\">\r\n                  <ArrowDropDownCircleIcon fontSize=\"small\" />\r\n                </IconButton>\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  ListItem,\r\n  Grid,\r\n  List,\r\n  ListItemText,\r\n  Divider,\r\n  Tab,\r\n  Tabs,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Header from \"./components/header.jsx\";\r\nimport DepthFirst from \"./components/dfsAlgs/dfs.jsx\";\r\nimport BreadthFirst from \"./components/bfsAlgs/bfs.jsx\";\r\nimport WordSearchDFS from \"./components/dfsAlgs/wordSearch.jsx\";\r\nimport BreadthFirstShortest from \"./components/bfsAlgs/bfsShortest.jsx\";\r\nimport StickyBox from \"react-sticky-box\";\r\nimport Logs from \"./components/logs.jsx\";\r\n\r\nconst strings = require(\"./static/strings.json\");\r\n\r\nfunction MainWindow(props) {\r\n  const [current, setCurrent] = useState(1);\r\n  const [sideTab, setSideTab] = useState(0);\r\n  const [stateLogs, setStateLogs] = useState([]);\r\n  const sections = 2;\r\n  const classes = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      display: \"none\",\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        display: \"block\",\r\n      },\r\n    },\r\n  }));\r\n\r\n  const ListItemLink = (props) => {\r\n    return <ListItem button component=\"a\" {...props} />;\r\n  };\r\n\r\n  const sectStyle = {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  };\r\n\r\n  const addLog = (newLog) => {\r\n    let logs = [...stateLogs];\r\n    logs.push(newLog);\r\n    console.log(logs);\r\n    setStateLogs(logs);\r\n  };\r\n\r\n  const clearLogs = () => {\r\n    setStateLogs([]);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   window.addEventListener(\"scroll\", handleOnScroll);\r\n  //   return () => {\r\n  //     window.removeEventListener(\"scroll\", handleOnScroll);\r\n  //   };\r\n  // }, []);\r\n\r\n  const handleOnScroll = () => {\r\n    const a = document.body.clientHeight;\r\n    if (sections * Math.round(window.scrollY / a) != current) {\r\n      setCurrent(sections * Math.round(window.scrollY / a));\r\n      console.log(Math.round(window.scrollY / a));\r\n    }\r\n  };\r\n\r\n  const matchParentStyle = {\r\n    height: \"80%\",\r\n    width: \"100%\",\r\n  };\r\n\r\n  const handleSideTabChange = (e, nv) => {\r\n    setSideTab(nv);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <ParticleAnim /> */}\r\n      <Header />\r\n      <div style={{ padding: \"20px\" }}>\r\n        <Grid container sx={{ height: 100 }} spacing={3} margin={20}>\r\n          <Grid item md={0} xs={0}>\r\n            {/* <StickyBox>\r\n              <section style={sectStyle}>\r\n                <div className=\"glass-card\" style={matchParentStyle}>\r\n                  <Tabs\r\n                    value={sideTab}\r\n                    onChange={handleSideTabChange}\r\n                    centered\r\n                    variant=\"fullWidth\"\r\n                  >\r\n                    <Tab\r\n                      label=\"Navigation\"\r\n                      onClick={() => {\r\n                        setSideTab(0);\r\n                      }}\r\n                    />\r\n                    <Tab\r\n                      label=\"Logs\"\r\n                      onClick={() => {\r\n                        setSideTab(1);\r\n                      }}\r\n                    />\r\n                  </Tabs>\r\n                  <div\r\n                    style={{\r\n                      display: sideTab == 0 ? \"block\" : \"none\",\r\n                    }}\r\n                  >\r\n                    <List component=\"nav\" aria-label=\"dfs links\">\r\n                      <ListItem button>\r\n                        <ListItemText primary=\"Depth First Search (DFS)\" />\r\n                      </ListItem>\r\n                      <ListItem button>\r\n                        <ListItemText primary=\"Word Search (DFS Implementation)\" />\r\n                      </ListItem>\r\n                    </List>\r\n                    <Divider />\r\n\r\n                    <List\r\n                      component=\"nav\"\r\n                      aria-label=\"secondary mailbox folders\"\r\n                    >\r\n                      <ListItem button>\r\n                        <ListItemText primary=\"Breadth First Search (BFS)\" />\r\n                      </ListItem>\r\n                    </List>\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      display: sideTab == 0 ? \"none\" : \"block\",\r\n                      padding: \"10px\",\r\n                      overflowX: \"auto\",\r\n                    }}\r\n                  >\r\n                    <Logs logs={stateLogs} />\r\n                  </div>\r\n                </div>\r\n              </section>\r\n            </StickyBox> */}\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <section style={sectStyle} id=\"depth-first\">\r\n              <DepthFirst addLog={addLog} />\r\n            </section>\r\n            <section style={sectStyle} id=\"breadth-first\">\r\n              <BreadthFirst />\r\n            </section>\r\n            <section style={sectStyle} id=\"dfs-word-search\">\r\n              <WordSearchDFS />\r\n            </section>\r\n            <section style={sectStyle} id=\"bfs-shortest-path\">\r\n              <BreadthFirstShortest />\r\n            </section>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default MainWindow;\r\n","import { useState, React } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport MainWindow from \"./MainWindow\";\r\nimport { ThemeProvider, createTheme } from \"@material-ui/core\";\r\nimport \"./index.css\";\r\nimport \"./App.css\";\r\n// need to import the vis network css in order to show tooltip\r\n// import \"./network.css\";\r\n\r\nfunction App() {\r\n  const hasWindow = typeof window !== \"undefined\";\r\n  const [dimensions, setDimensions] = useState({\r\n    width: hasWindow ? window.innerWidth : null,\r\n    height: hasWindow ? window.innerHeight : null,\r\n  });\r\n\r\n  const theme = createTheme({\r\n    typography: {\r\n      fontFamily: \"Inter\",\r\n    },\r\n  });\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className=\"App\">\r\n        <MainWindow dims={dimensions} />\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}